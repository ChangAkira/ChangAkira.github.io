{"meta":{"title":"是默元的博客","subtitle":"你来看我啦","description":"是默元的博客","author":"Chang Akira","url":"https://changakira.github.io","root":"/"},"pages":[{"title":"","date":"2024-11-05T11:02:02.745Z","updated":"2023-07-21T10:21:14.000Z","comments":true,"path":"404.html","permalink":"https://changakira.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2024-11-05T11:02:02.745Z","updated":"2024-08-24T14:17:04.000Z","comments":true,"path":"bangumis.json","permalink":"https://changakira.github.io/bangumis.json","excerpt":"","text":"{\"wantWatch\":[],\"watching\":[{\"title\":\"有兽焉\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/8aa38d11d0d174e554903aa6ca24f98fc1c5def7.png\",\"totalCount\":\"全48话\",\"id\":28235647,\"follow\":\"146.3 万\",\"view\":\"2.2 亿\",\"danmaku\":\"22.3 万\",\"coin\":\"30.2 万\",\"score\":9.6,\"des\":\"上古神兽貔貅皮皮来到了人间，为了躲避人类追捕，逃到了好友四不像开的专门帮助神兽的鹿人店，并结识了一群来自四面八方，性格各异的神兽，开始了远离人烟，轻松惬意的日常。...\",\"progress\":false,\"ep_status\":false,\"new_ep\":48},{\"title\":\"宇崎学妹想要玩！\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/9477f8b8f2e9fefa328f8f9e3f6f6cc1e00d5aa9.png\",\"totalCount\":\"全12话\",\"id\":28229231,\"follow\":\"270.2 万\",\"view\":\"9868.8 万\",\"danmaku\":\"108.6 万\",\"coin\":\"47.3 万\",\"score\":9.4,\"des\":\"性格有些孤僻喜爱安静的大学３年级生，樱井真一。\\n总是被小一届，同高中毕业的学妹宇崎花，以各种照顾爱耍孤僻的学长的名义为由，进行各种无厘头的纠缠。\\n虽然一开始觉得有点困扰，但却逐渐习惯起来…...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"喜羊羊与灰太狼\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/4cd5d75b3ac57d30a114bbe21a9dacd4f7c2fa81.png\",\"totalCount\":\"全530话\",\"id\":21827044,\"follow\":\"181.0 万\",\"view\":\"3117.3 万\",\"danmaku\":\"4.7 万\",\"coin\":\"5.4 万\",\"score\":9.8,\"des\":\"羊历3131年，青青草原上，羊羊族群十分兴旺发达，羊羊们在这里幸福地生活着。直到灰太狼带着妻子红太狼搬到对岸的森林，羊羊们才真正在现实中见到书上记载的狼。\\n灰太狼每天想尽办法要跨越铁栅栏抓羊，但他没想...\",\"progress\":false,\"ep_status\":false,\"new_ep\":530},{\"title\":\"我的三体 第四季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b4f3f6b8165663d1ca238c901ad9f4321b0a5cbc.png\",\"totalCount\":\"全9话\",\"id\":21083515,\"follow\":\"287.2 万\",\"view\":\"3723.9 万\",\"danmaku\":\"19.5 万\",\"coin\":\"35.5 万\",\"score\":9.6,\"des\":\"【第5集起大会员专享】为应对即将入侵地球的三体人，航天博士程心主持了对三体舰队主动侦查的阶梯计划，将身患绝症的云天明捐赠的大脑送入太空。得知云天明一直深爱自己并送给自己一颗星星，程心后悔莫及，进入冬眠...\",\"progress\":false,\"ep_status\":false,\"new_ep\":9},{\"title\":\"黑执事 寄宿学校篇\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b19b958acad0c6fcc6bb798b1581b0d4a85d4499.png\",\"totalCount\":\"全11话\",\"id\":22343101,\"follow\":\"263.1 万\",\"view\":\"543.9 万\",\"danmaku\":\"2.9 万\",\"coin\":9632,\"score\":9,\"des\":\"19世纪的英国，名门贵族法多姆凯贝家的管家锡巴斯查恩·米加艾里斯，与他的13岁主人西雅尔·法多姆凯贝一同作为“女王的看门狗”，承接着社会黑暗面的肮脏工作。\\n有一天，西雅尔收到女王来信，信中说就读于英国...\",\"progress\":false,\"ep_status\":false,\"new_ep\":11},{\"title\":\"喜羊羊与灰太狼之跨时空救兵\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/49826421471e5330efd321f01c9a5fd6a3e5207e.png\",\"totalCount\":\"全60话\",\"id\":22368611,\"follow\":\"180.9 万\",\"view\":\"404.9 万\",\"danmaku\":\"1.7 万\",\"coin\":\"1.1 万\",\"score\":9.9,\"des\":\"小羊们被卷入一个毁灭世界的惊天阴谋，穿梭在混乱的时间轴里，拯救被扰乱的时空。在这一次的冒险中，他们穿梭历史，回到过去，帮助一个个受到影响的老朋友，更在这一过程里，发现一些当年隐藏在背后的真相，在逐步接...\",\"progress\":false,\"ep_status\":false,\"new_ep\":60},{\"title\":\"间谍过家家 第二季 中配版\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/db3f15b8e5a9eb21890447745ce1c8215a985d52.png\",\"totalCount\":\"全12话\",\"id\":21618488,\"follow\":\"970.9 万\",\"view\":\"767.6 万\",\"danmaku\":\"1.2 万\",\"coin\":7516,\"score\":\"-\",\"des\":\"每个人都有不可告人的一面。 这是一个世界各国均暗地里进行激烈情报战的时代。奥斯塔尼亚（Ostania）与维斯达利斯（Westalis）的冷战状态已经持续数十年。 是维斯达利斯情报局奥斯塔尼亚对...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"时光代理人 第二季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/88f464de635f87a3a8cec8fbb2b106221efd84e6.png\",\"totalCount\":\"全12话\",\"id\":28235360,\"follow\":\"947.1 万\",\"view\":\"1.9 亿\",\"danmaku\":\"123.9 万\",\"coin\":\"127.7 万\",\"score\":9.1,\"des\":\"为了找到一系列罪案的操纵者，程小时求助于肖力，找寻一切藏匿于暗中的蛛丝马迹。但是拥有未知超能力的凶手在阴影之中，也从没有停止过他的阴谋。神秘少年如影随形，身边伙伴接连遇害，程小时屡次身陷险境。随着追查...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"时光代理人 英都篇\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/94771c569468f50eb50ec54b26073eaefdbbc6c4.png\",\"totalCount\":\"全12话\",\"id\":22203850,\"follow\":\"923.5 万\",\"view\":\"400.3 万\",\"danmaku\":5597,\"coin\":\"1.4 万\",\"score\":\"-\",\"des\":\"为了拯救死去的程小时，陆光回到了最初，沿着命运的轨迹重新开始。然而一张载着程小时父母线索的照片出现在时光照相馆，为查明真相，陆光怀着忐忑的心情与程小时前往英都。看似友善的当红模特夏斐，举止乖张的唐人街...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"22/7\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/ddea3bbc9913be96245709aca36e8bdf19285b26.png\",\"totalCount\":\"全13话\",\"id\":28223859,\"follow\":\"131.8 万\",\"view\":\"2266.6 万\",\"danmaku\":\"26.2 万\",\"coin\":\"10.7 万\",\"score\":9.3,\"des\":\"泷川美羽突然收到来自演艺事务所“G.I.P”的一封信。信上说被选为某个新项目的成员。她半信半疑地去了信上的地方，被命运引导一样地聚集了，包含美羽在内的的8个少女们。“你们将作为偶像组合正式出道”——被...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"MR.BONE\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/52ea72942c0807f305f5dcba3a65a9e008bc1412.png\",\"totalCount\":\"未完结\",\"id\":28236437,\"follow\":\"64.5 万\",\"view\":\"5.0 亿\",\"danmaku\":\"11.3 万\",\"coin\":\"23.3 万\",\"score\":9.5,\"des\":\"我叫MR.BONE，我生活在一个满是脏丝（Zombies）的世界！在最初的混乱过后，随着社会秩序的稳定，人们从脏丝的威胁当中恢复过来，与它们共同生活在这个世界上。找到新工作的我，也在生活的轨迹里认识了...\",\"progress\":false,\"ep_status\":false,\"new_ep\":\"167\"},{\"title\":\"非人哉 第二季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/d7d2f4b98abc6e611c51bfd685e9aaa4e0095903.png\",\"totalCount\":\"全25话\",\"id\":21207243,\"follow\":\"475.8 万\",\"view\":\"5307.5 万\",\"danmaku\":\"4.0 万\",\"coin\":\"5.4 万\",\"score\":9.8,\"des\":\"故事围绕着女主角九尾狐九月展开，表现生活在当代都市中的九月作为一名普通的上班族努力工作挣钱，与时俱进的成长历程。\\n同时，讲述了许多我们耳熟能详的中国神话传说人物在当代生动有趣，丰富多彩的日常生活。作品...\",\"progress\":false,\"ep_status\":false,\"new_ep\":25},{\"title\":\"咒术回战 第二季\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/69683aa3df3dbfc946afc0526296e8c80dfdfed3.png\",\"totalCount\":\"全23话\",\"id\":20310848,\"follow\":\"1289.9 万\",\"view\":\"3.0 亿\",\"danmaku\":\"79.9 万\",\"coin\":\"53.2 万\",\"score\":9.4,\"des\":\"这是无敌的两人再也回不去的青春。\\n2018年6月，虎杖悠仁被两面宿傩附身。\\n2017年12月，乙骨忧太解除祈本里香的诅咒。\\n再往前追溯到2006年春——五条悟和夏油杰还在高专时期。\\n\\n成为咒术师大显身...\",\"progress\":false,\"ep_status\":false,\"new_ep\":23},{\"title\":\"间谍过家家 第二季\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/a524567f86ec21368731f6dc283f66bd1bd0af92.png\",\"totalCount\":\"全12话\",\"id\":21086686,\"follow\":\"1251.7 万\",\"view\":\"1.5 亿\",\"danmaku\":\"35.4 万\",\"coin\":\"33.1 万\",\"score\":9.7,\"des\":\"每个人都有不可告人的一面。\\n\\n这是一个世界各国均暗地里进行激烈情报战的时代。奥斯塔尼亚（Ostania）与维斯达利斯（Westalis）的冷战状态已经持续数十年。\\n\\n是维斯达利斯情报局奥斯塔尼...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"海绵宝宝 第十季\",\"type\":\"番剧\",\"area\":\"美国\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/0cfc470add5be65f3e8c667857e1cb4b6448a418.png\",\"totalCount\":\"全9话\",\"id\":21175614,\"follow\":\"94.9 万\",\"view\":\"1089.9 万\",\"danmaku\":3161,\"coin\":3373,\"score\":\"-\",\"des\":\"《海绵宝宝》的故事情节主要围绕着主角海绵宝宝和他的好朋友派大星、邻居章鱼哥、上司蟹老板等人展开，场景设定于太平洋海底，一座被称为比奇堡的城市。 海绵宝宝是方块形的黄色海绵，住在比基尼海滩（裤头村、比奇...\",\"progress\":false,\"ep_status\":false,\"new_ep\":9},{\"title\":\"凹凸学园 第三季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/4499b8c9ca23518e7181732721feb7829237a6b7.png\",\"totalCount\":\"全15话\",\"id\":21089248,\"follow\":\"60.8 万\",\"view\":\"862.3 万\",\"danmaku\":\"5.3 万\",\"coin\":\"3.0 万\",\"score\":9.4,\"des\":\"在午夜神秘的钢琴声中凹凸学园的新学期开学了。教师团队对校园中发生的神秘事件含糊其辞，而一个个谜题却总出现在同学们的身边。洒满阳光的美术教室弥漫着浓雾、破旧的老教学楼散发着诱人的香气……幕后主使竟拥有关...\",\"progress\":false,\"ep_status\":false,\"new_ep\":15},{\"title\":\"一课一练 中文版\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/e440d843d935e0d389897d9038ca102d8978d81e.jpg\",\"totalCount\":\"全12话\",\"id\":5570,\"follow\":\"30.0 万\",\"view\":\"835.4 万\",\"danmaku\":\"23.4 万\",\"coin\":\"2.2 万\",\"score\":6.2,\"des\":\"在由学历决定价值的世界，通过国家特级学力测验就意味走上人生事业的巅峰。考场即战场，这是刻苦学习的L型学生和擅长特殊手段的C型学生间的比试。C型主角诸葛睦明与L型妹妹黄巧衣，怀抱着同一个目标，向特测发起...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"猫之茗\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/5d8d1f7613f9b5ffc3cec898a7daf032e67ae052.png\",\"totalCount\":\"全40话\",\"id\":28223054,\"follow\":\"264.8 万\",\"view\":\"2.1 亿\",\"danmaku\":\"57.0 万\",\"coin\":\"51.8 万\",\"score\":9.8,\"des\":\"【特别迷你剧犬之茗第2-4集大会员抢先1集，第5集起大会员专享】夏至城主一心为城为民，人民安居乐业，GDP蒸蒸日上，家庭幸福美满。然而一场大雨却成为了灾难的开始，人祸接连不断、反派（普洱）强盗（祁红）...\",\"progress\":false,\"ep_status\":false,\"new_ep\":40},{\"title\":\"晚安世界\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/4f24d871d6dd7c58237c7a4064ca3e9b5b454294.png\",\"totalCount\":\"全12话\",\"id\":21086918,\"follow\":\"16.6 万\",\"view\":\"348.9 万\",\"danmaku\":\"1.6 万\",\"coin\":\"1.6 万\",\"score\":9.2,\"des\":\"在这混账世界里连接起的家庭故事。\\n在网游《行星》中，有一个号称最强的四人组。\\n四人组的名号是“赤羽一家”。\\n他们是在网游里的模拟家庭。\\n虽然他们本人并不知晓，但他们在现实世界里，也是已经支离破碎的真正...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"总之就是非常可爱 第二季\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/2f57b2255f0b8608fabdca55612d40b4249d4dcb.png\",\"totalCount\":\"全16话\",\"id\":20266559,\"follow\":\"564.0 万\",\"view\":\"4146.4 万\",\"danmaku\":\"32.8 万\",\"coin\":\"22.0 万\",\"score\":9.5,\"des\":\"“一人无法成形，因而起誓二人相爱”\\n一对新婚夫妻经历了命运般的邂逅、求婚、在破公寓过新婚生活、买结婚戒指、问候父母，他们在公寓被烧毁后也不气馁，在昭和年代的房子中加深爱意……丈夫名叫由崎星空（NASA...\",\"progress\":false,\"ep_status\":false,\"new_ep\":16},{\"title\":\"少女终末旅行\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/1431ca5bb2f7143062e3df8f21b8448cf8cccc13.jpg\",\"totalCount\":\"全12话\",\"id\":6463,\"follow\":\"263.5 万\",\"view\":\"4245.7 万\",\"danmaku\":\"103.1 万\",\"coin\":\"42.4 万\",\"score\":9.8,\"des\":\"本作舞台在人类繁华的文明迎来终结的很久以后，人类基本灭绝，甚至生物都不再存在的末日世界。复杂够高的都市成为迷宫般的废墟，得不到维护的机械渐渐停止运转。连何时终结了，何时开始终结的思考都不复存在的这个世...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"夏目友人帐 唤石者与怪异的访客（中配）\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/6cf43708b779cde84ad285ff4e3a080de98df0af.png\",\"totalCount\":\"全1话\",\"id\":20307504,\"follow\":\"558.5 万\",\"view\":\"109.9 万\",\"danmaku\":1104,\"coin\":2098,\"score\":\"-\",\"des\":\"本作由【唤石者】与【怪异的访客】两个人气短篇集锦而成。讲述生来便能看见各种妖怪的夏目，与自称保镖的猫咪老师一同邂逅的一系列温暖故事。\\n【唤石者】一天夏目在森林中遇到一只小妖怪——密实。密实称自己肩负「...\",\"progress\":false,\"ep_status\":false,\"new_ep\":1},{\"title\":\"疯狂动物城大小事\",\"type\":\"番剧\",\"area\":\"美国\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/9fa4743aae7fd27c5e094473b438e8c158c18cfd.png\",\"totalCount\":\"全6话\",\"id\":20267423,\"follow\":\"17.9 万\",\"view\":\"721.0 万\",\"danmaku\":6962,\"coin\":\"1.4 万\",\"score\":9.7,\"des\":\"《疯狂动物城大小事+》带观众重回最爱的疯狂动物城，以系列短片的形式深入这部奥斯卡获奖动画电影，探索有趣居民们的生活小故事，例如时尚前卫的北极鼩鼱露露、爱吃糖的动物警察局豹警官，还有带来满满惊喜的笑脸树...\",\"progress\":false,\"ep_status\":false,\"new_ep\":6},{\"title\":\"武林不二周刊\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/fccf0a605e0dde7372d94be9e86824ca390212b2.png\",\"totalCount\":\"全24话\",\"id\":28235411,\"follow\":\"13.0 万\",\"view\":\"469.7 万\",\"danmaku\":3269,\"coin\":\"1.3 万\",\"score\":8.9,\"des\":\"曾经名满武林的花间派，面临掌门失踪、巨额欠款的破产危机，大师姐花想容临危受命，重拾《武林不二周刊》招牌，报道江湖大事小情；前有深情高富帅，后有失忆美强呆；二货师弟师妹不算靠谱，还有债主上门同行竞争。江...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"致不灭的你 第二季\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/9f42a3f76429092b6011e5d9ebd2d7fe8100e21f.png\",\"totalCount\":\"全20话\",\"id\":28339716,\"follow\":\"479.8 万\",\"view\":\"2860.6 万\",\"danmaku\":\"9.6 万\",\"coin\":\"8.9 万\",\"score\":9.4,\"des\":\"不死最初只是个被丢到人世中的“球体”。犹如婴孩的不死，遇到过犹如母亲的少女、勇猛非凡的兄长、同生共死的战友、最后送走了一位老婆婆后，终于成长为了接近人的生命。之后又过了几十年。因为宿敌“叩门者”的攻击...\",\"progress\":false,\"ep_status\":false,\"new_ep\":20},{\"title\":\"两不疑 第二季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/bdda25c152a93ac0b5e421f3a6c90900f393448c.jpg\",\"totalCount\":\"全24话\",\"id\":28235416,\"follow\":\"497.7 万\",\"view\":\"1.8 亿\",\"danmaku\":\"33.5 万\",\"coin\":\"70.1 万\",\"score\":9.8,\"des\":\"大辰国帝后因意外互换了身份，原本两看生厌的人却因为互换体会到了彼此的难处。在互换的过程中，逐渐开始互相理解、互相信任。在边疆告急的危机关头，萧锦昀（实际为徐钰）为平定边境御驾亲征，最终凯旋。就在帝后二...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"我的三体之章北海传\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b6ba1ac1498e17750f69da19163b4adbbe122995.png\",\"totalCount\":\"全9话\",\"id\":28223066,\"follow\":\"192.7 万\",\"view\":\"1.3 亿\",\"danmaku\":\"115.5 万\",\"coin\":\"235.0 万\",\"score\":9.9,\"des\":\"故事发生在从近未来到两百年后的历史跨度上，地球文明被三体用一种叫做智子的超级科技锁死，基础研究因而停滞不前。但人类仍然需要在此基础上不断前进来抵御即将到来的三体人的进攻，守卫自己的家园和人类文明。在更...\",\"progress\":false,\"ep_status\":false,\"new_ep\":9},{\"title\":\"小明和王猫\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/31a7f954f81b22884018fb111ef27e09c7b5885b.jpg\",\"totalCount\":\"全13话\",\"id\":5390,\"follow\":\"37.2 万\",\"view\":\"691.3 万\",\"danmaku\":\"9.7 万\",\"coin\":\"8.5 万\",\"score\":9.9,\"des\":\"这是一部拥有中国特色的动画，无论情节还是画风都没有模仿日美的痕迹。他不避讳孩子世界中的那点小小的尔虞我诈，甚至敢于调侃大人。人物塑造力透纸背，性格鲜明。全剧围绕二年级学生王小明及其精灵朋友“王猫”间的...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"中国奇谭\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/e9ad30dd6f8fa74df16c62de048e35dd5d7ffda1.png\",\"totalCount\":\"全8话\",\"id\":28235401,\"follow\":\"587.0 万\",\"view\":\"3.2 亿\",\"danmaku\":\"74.0 万\",\"coin\":\"289.6 万\",\"score\":9.9,\"des\":\"动画短片集《中国奇谭》由八个植根于中国传统文化的独立的故事组成：《小妖怪的夏天》、《鹅鹅鹅》、《林林》、《乡村巴士带走了王孩儿和神仙》、《小满》、《飞鸟与鱼》、《小卖部》、《玉兔》。故事纵览古今、展望...\",\"progress\":false,\"ep_status\":false,\"new_ep\":8},{\"title\":\"间谍过家家\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/f50a08cc1562f2c1e933b656c00db3fcafd110e9.png\",\"totalCount\":\"全25话\",\"id\":28237119,\"follow\":\"1264.3 万\",\"view\":\"8.2 亿\",\"danmaku\":\"329.0 万\",\"coin\":\"320.9 万\",\"score\":9.7,\"des\":\"每个人都有不可告人的一面。\\n\\n这是一个世界各国均暗地里进行激烈情报战的时代。奥斯塔尼亚（Ostania）与维斯达利斯（Westalis）的冷战状态已经持续数十年。\\n\\n是维斯达利斯情报局奥斯塔尼...\",\"progress\":false,\"ep_status\":false,\"new_ep\":25},{\"title\":\"海绵宝宝\",\"type\":\"番剧\",\"area\":\"美国\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/fa3b505694f6960e727a4660dde6dec38a9a7bf2.png\",\"totalCount\":\"全161话\",\"id\":28236718,\"follow\":\"100.1 万\",\"view\":\"1.6 亿\",\"danmaku\":\"20.7 万\",\"coin\":\"21.0 万\",\"score\":9.8,\"des\":\"海绵宝宝是方块形的黄色海绵，住在比基尼海滩（裤头村、比奇堡）的一个菠萝里，他的宠物是一只会“猫~猫~”叫的海蜗牛小蜗，海绵宝宝喜欢捕捉水母，职业是蟹堡王（The Krusty Krab）里的头号厨师。...\",\"progress\":false,\"ep_status\":false,\"new_ep\":161},{\"title\":\"元气奇事\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/ac711e44b859148366c47cdf2bfd67af8bf9d690.png\",\"totalCount\":\"全24话\",\"id\":28338747,\"follow\":\"13.4 万\",\"view\":\"1540.8 万\",\"danmaku\":\"5.4 万\",\"coin\":\"5.6 万\",\"score\":9.5,\"des\":\"主角本来是一位苦逼社畜，由于加班走夜路不小心掉坑穿越到元气骑士世界，刚落地就被“良心队友”坑进地牢，独自面对来势汹汹的怪物；为了存活下去并回到原来的世界，主角硬着头皮前往地牢深处，一路上还结识了不少伙...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"猫神八百万\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/0b4699ac2553ad2fd2ceba01fe4fc5bde860fb7b.jpg\",\"totalCount\":\"全12话\",\"id\":904,\"follow\":\"55.0 万\",\"view\":\"465.3 万\",\"danmaku\":\"4.9 万\",\"coin\":\"2.0 万\",\"score\":9.7,\"des\":\"作品的故事设定在现今的21世纪，猫神茧与普通人类柚子一起生活。柚子的父母因为意外身亡，所以柚子自少便一人继承了古董店“八百万堂”。而在这寄居的茧，虽然是负责守护被遗忘的万物和记忆的神明，但在作品中只是...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"超能陆战队动画系列 第1季\",\"type\":\"番剧\",\"area\":\"美国\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/c2d15f1e639f886c58fc22e7332fdcd82d91fc67.jpg\",\"totalCount\":\"全22话\",\"id\":28337822,\"follow\":4111,\"view\":\"22.6 万\",\"danmaku\":3,\"coin\":61,\"score\":\"-\",\"des\":\"十四岁的科技天才小宏和温柔的先进机器人大白一起历险。小宏作为旧京山科技大学新入生，要面对学术压力，也会碰到课外活动的麻烦。小宏、大白还有他们的朋友们组成了传奇的超级英雄团队“超能陆战队”，一同从各种各...\",\"progress\":false,\"ep_status\":false,\"new_ep\":22},{\"title\":\"瓦尼塔斯的手记\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/9aec14cf711e7968aa1796ae9ba2db8613a113de.png\",\"totalCount\":\"全24话\",\"id\":28234616,\"follow\":\"311.5 万\",\"view\":\"7090.2 万\",\"danmaku\":\"44.1 万\",\"coin\":\"31.8 万\",\"score\":9.7,\"des\":\"这是逐渐走向毁灭的，吸血鬼们的故事。\\n\\n这里是同时存在着人类与吸血鬼的19世纪的法国。\\n青年吸血鬼诺亚，为了寻找向吸血鬼散布诅咒的魔导书“瓦尼塔斯之书”，而踏上了前往巴黎的旅途。\\n在路途中的飞船上，事...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"宿命回响：命运节拍\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/ee8f3e39a672d78f4bcadf35fbad281b1869cd91.png\",\"totalCount\":\"全12话\",\"id\":28235155,\"follow\":\"346.7 万\",\"view\":\"6673.9 万\",\"danmaku\":\"27.6 万\",\"coin\":\"35.9 万\",\"score\":7.4,\"des\":\"“音乐是一种力量。”\\n乐曲成为了少女的力量。\\n过去时代诞生的传说中的歌剧、伟大的乐曲，被乐谱灌输成了新的生命「奏者」。\\n在失去音乐的世界里，用音乐力量战斗的少女们虚幻又美丽的命运故事。\\n她们只是以前方...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"世界顶尖的暗杀者,转生为异世界贵族\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/4f9b67c600242e6772072a152c48b18dba016864.png\",\"totalCount\":\"全12话\",\"id\":28235173,\"follow\":\"519.7 万\",\"view\":\"1.6 亿\",\"danmaku\":\"102.8 万\",\"coin\":\"98.9 万\",\"score\":9.2,\"des\":\"世界第一的暗杀者，作为暗杀世家的长男重生了。\\n作为能够转生到异世界的条件，他接下了女神给下达的唯一一项任务。\\n\\n“杀了被预言会带给人类灾厄的‘勇者’”。\\n\\n这是曾经世界最强暗杀者在新的人生中必须要完成...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"非人哉\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/8f96b3cb7a5018f7fb077549248568e2fcac3b2a.jpg\",\"totalCount\":\"全96话\",\"id\":13372924,\"follow\":\"492.1 万\",\"view\":\"8.4 亿\",\"danmaku\":\"165.0 万\",\"coin\":\"93.5 万\",\"score\":9.8,\"des\":\"中国古典神话传说中的“著名”精怪是如何在现代社会生存下去，他们成为了我们身边有着神仙特色的宅女、暖男、上班族、犬系男友，他们上演着生活中搞笑而怪诞的小故事，关乎快乐、关乎友情，在我们平凡、忙碌的日常构...\",\"progress\":false,\"ep_status\":false,\"new_ep\":96},{\"title\":\"关于我转生变成史莱姆这档事 第二季\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/fd492888df64bbc3b821dac5d516dbc1c2fe5f08.png\",\"totalCount\":\"全24话\",\"id\":28231812,\"follow\":\"916.4 万\",\"view\":\"4.6 亿\",\"danmaku\":\"287.5 万\",\"coin\":\"240.1 万\",\"score\":8.9,\"des\":\"主人公利姆鲁与仰慕他而聚集的众多魔物们所建立的国家「鸠拉·特恩佩斯特国」，经由与邻国的协议及交易，让「人类与魔物共同漫步的国家」这一温柔的理想逐步成形。\\n\\n利姆鲁作为曾是人类的史莱姆当然拥有「对人类的...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"致不灭的你\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/1ae94fbb35d8e23bb84926b694509f8b057f96e6.png\",\"totalCount\":\"全20话\",\"id\":28233896,\"follow\":\"503.4 万\",\"view\":\"1.5 亿\",\"danmaku\":\"151.4 万\",\"coin\":\"100.5 万\",\"score\":9.5,\"des\":\"本剧讲述了一个情节跌宕、场面宏大的奇幻故事，通过拥有不灭之身的主人公“不死”来探索人生哲理。\\n不死起初是一个被投放到人世间的“球”。\\n\\n它具有“幻化为刺激源形态的能力”和“死后重生的能力”。\\n\\n先后从...\",\"progress\":false,\"ep_status\":false,\"new_ep\":20},{\"title\":\"总之就是非常可爱\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/3b97bfc609e08417eb391ef975a8648c28c55e04.png\",\"totalCount\":\"全13话\",\"id\":28229676,\"follow\":\"580.8 万\",\"view\":\"2.0 亿\",\"danmaku\":\"295.8 万\",\"coin\":\"242.8 万\",\"score\":9.5,\"des\":\"由崎星空对神秘美少女——司一见钟情。面对星空决死的告白，她的回答是“如果你愿意和我结婚，那我就跟你交往”？！充满了星空与司的爱，可爱&高贵的新婚生活开始了！...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"此喵太白\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/1c204baa973f960605cb3813de5ac64cfba67da5.jpg\",\"totalCount\":\"全10话\",\"id\":28234192,\"follow\":\"8.7 万\",\"view\":\"367.5 万\",\"danmaku\":8692,\"coin\":\"1.8 万\",\"score\":\"-\",\"des\":\"《此喵太白》是由《忘川风华录》IP世界观衍生创作的动态漫画泡面番。故事发生在忘川世界中，李白因醉酒追月而溺水，不幸魂穿，变成了一只——李白喵！魂穿之后，李白为了恢复原形，在系统的“指引”下，每天完成一...\",\"progress\":false,\"ep_status\":false,\"new_ep\":10},{\"title\":\"关于我转生变成史莱姆这档事 转生史莱姆日记\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/cac1699418451387f93572066b7e5d14d799d3cd.jpg\",\"totalCount\":\"全12话\",\"id\":28233903,\"follow\":\"840.3 万\",\"view\":\"1.2 亿\",\"danmaku\":\"49.2 万\",\"coin\":\"49.6 万\",\"score\":9.7,\"des\":\"美妙的史莱姆人生！\\n\\n累计突破50万部的大人气外传四格漫画『转生史莱姆日记』，作为转生史莱姆的外传系列首次TV动画化！\\n「因为拿到了贵重的纸，我把至今为止发生的事情以日记形式记录了下来。开头的话就这么...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"时光代理人\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/7dac8d193a93409777ce027dba35b068efaca718.png\",\"totalCount\":\"全12话\",\"id\":28230742,\"follow\":\"942.8 万\",\"view\":\"4.0 亿\",\"danmaku\":\"319.6 万\",\"coin\":\"326.6 万\",\"score\":9.7,\"des\":\"在繁华都市的某个角落，有一家叫做“时光照相馆”的小店还在照常营业。虽然门庭冷落，但它背后其实由两个具有特殊能力的男人——程小时和陆光经营着。为了完成顾客的委托，陆光和程小时组队配合使用超能力进入照片，...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"秘宝之国\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/bc151e79e9173b10fe16c88515cca1a833543e30.png\",\"totalCount\":\"全10话\",\"id\":28223055,\"follow\":\"111.7 万\",\"view\":\"2030.5 万\",\"danmaku\":\"6.4 万\",\"coin\":\"9.1 万\",\"score\":8.4,\"des\":\"在异世界日复一日修复着化作人形的文物少女们，虽然被当做工具人时常感到身心疲惫，但依然孜孜不倦地调查秘灵世界的真相，这是关于意外获得了修复师能力的打工人钟子信与编钟少女崇音对抗遗忘病毒的解谜探险故事。...\",\"progress\":false,\"ep_status\":false,\"new_ep\":10},{\"title\":\"夏目友人帐 唤石者与怪异的访客\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/6cf43708b779cde84ad285ff4e3a080de98df0af.png\",\"totalCount\":\"全1话\",\"id\":28234316,\"follow\":\"568.4 万\",\"view\":\"1732.3 万\",\"danmaku\":\"19.7 万\",\"coin\":\"19.2 万\",\"score\":9.9,\"des\":\"本作由【唤石者】与【怪异的访客】两个人气短篇集锦而成。讲述生来便能看见各种妖怪的夏目，与自称保镖的猫咪老师一同邂逅的一系列温暖故事。\\n【唤石者】一天夏目在森林中遇到一只小妖怪——密实。密实称自己肩负「...\",\"progress\":false,\"ep_status\":false,\"new_ep\":1},{\"title\":\"王兄李兄没完没了的故事\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/d159a04e42f471c90db7045e377f87e8998418ed.jpg\",\"totalCount\":\"全31话\",\"id\":6652,\"follow\":\"12.5 万\",\"view\":\"426.0 万\",\"danmaku\":\"2.5 万\",\"coin\":\"1.2 万\",\"score\":9.6,\"des\":\"在那遥远的唐朝，有一个小村庄，村里住着以王兄、李兄为首的一群文人朋友——诗情画意的水墨风田园故事，历史人物趣味新说，带你走近和课本上不一样的不靠谱王李二人。...\",\"progress\":false,\"ep_status\":false,\"new_ep\":31},{\"title\":\"时间支配者\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/1c3a9288b3b1ad40564284e3569d632bd17f546d.jpg\",\"totalCount\":\"全10话\",\"id\":2846,\"follow\":\"14.1 万\",\"view\":\"402.7 万\",\"danmaku\":\"1.3 万\",\"coin\":4188,\"score\":8.7,\"des\":\"拥有倒退时间能力的恶魔以时间可以回到过去来诱惑心存悔意的人类。然而在本质上，它们以吞噬人类的时间为食，被吞噬时间的人自身的时间会不断流失倒退，从成人到胚胎，最后消失。为对抗“计”，人类成立了神秘组织“...\",\"progress\":false,\"ep_status\":false,\"new_ep\":10},{\"title\":\"重创的伤口\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/16d85f3b70872b311582b59e0601e975b452b348.png\",\"totalCount\":\"全13话\",\"id\":28231850,\"follow\":\"55.3 万\",\"view\":\"688.6 万\",\"danmaku\":\"2.0 万\",\"coin\":\"1.1 万\",\"score\":6.3,\"des\":\"东京——『晓特区』。\\n这个国家新成立的经济特区预定地，将行政权让渡给了大企业『先岛Holdings』。围绕着仅适用于特区内的减税等权利，敌对企业策划种种阴谋，并最终爆发了大型暴动·晓抗争。内政荒废，先...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"那年那兔那些事儿 第一季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/ddb029703d0838000c3b7e2e39718a36dbbdcb77.jpg\",\"totalCount\":\"全12话\",\"id\":1689,\"follow\":\"322.3 万\",\"view\":\"2.4 亿\",\"danmaku\":\"225.2 万\",\"coin\":\"172.4 万\",\"score\":9.7,\"des\":\"本片讲述了一群兔子是怎么从种花家一穷二白的时候，通过自身的努力与奋斗，蹬了鹰酱一脸血，并且养殖出了自己的大蘑菇，发展成为蓝星最强五流氓之一的故事。本片故事纯属虚构，如有雷同，纯属巧合。本片漫画更新频繁...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"咒术回战\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/91e9534cc55aa1a6dc959e7d6d33bde970208232.png\",\"totalCount\":\"全24话\",\"id\":28229899,\"follow\":\"1309.0 万\",\"view\":\"9.4 亿\",\"danmaku\":\"550.8 万\",\"coin\":\"465.0 万\",\"score\":9.7,\"des\":\"少年战斗着——「为寻求正确的死亡」\\n辛酸·后悔·耻辱\\n\\n人类产生的负面情感，化为诅咒，潜入日常生活\\n\\n诅咒是蔓延于世界的祸源，最糟糕的情况下，会让人类踏入死亡\\n并且，诅咒只能以诅咒祓除\\n\\n拥有惊人身体...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"约定的梦幻岛 第二季\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/4e259309f0746011c54d5882e3ab8aabdee3d2ad.png\",\"totalCount\":\"全11话\",\"id\":28231852,\"follow\":\"335.7 万\",\"view\":\"4756.0 万\",\"danmaku\":\"42.2 万\",\"coin\":\"22.6 万\",\"score\":2.8,\"des\":\"——自由、是多么美丽、而又多么残酷啊。\\n成功从Grace=Field House逃出的15个孩子。\\n等待在抛弃虚伪的乐园而勇敢追求自由的他们的面前是、未曾见过的动植物、\\n以及一路追赶而来的「鬼」……外...\",\"progress\":false,\"ep_status\":false,\"new_ep\":11},{\"title\":\"Caligula 卡里古拉\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/3da24e9684fb21e7554eebeb9e76fbdf144e3779.png\",\"totalCount\":\"全12话\",\"id\":77552,\"follow\":\"92.0 万\",\"view\":\"1535.8 万\",\"danmaku\":\"19.7 万\",\"coin\":\"4.0 万\",\"score\":8.7,\"des\":\"“毁坏理想，回归现实——”\\n响彻城市的美妙歌声。如同被拥有绝大人气的偶像“μ”所守护着一般，平稳的日常在城市中流逝。\\n式岛律，是宫比市立吉志舞高中的一年级生。运动、学习、受到朋友的关照，在青春的正当中...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"列比乌斯/Levius\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/9ad3b01554f3413fcc71241e8d6980f2db871a5d.png\",\"totalCount\":\"全12话\",\"id\":28229026,\"follow\":\"31.8 万\",\"view\":\"375.4 万\",\"danmaku\":\"1.3 万\",\"coin\":\"1.2 万\",\"score\":9.4,\"des\":\"新生历19世纪。在争夺阿加塔沃特采矿所有权的福萨尼亚纷争结束后的5年。\\n在所有动力都使用“蒸汽”的这个时代，将机器融合于人体并进行格斗的格斗技非常盛行。\\n在战争中失去父亲和自己的右臂，母亲也成为植物人...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"超自然9人组\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/5d1364ae198c6e29c2daa64e48ad539fe5094496.jpg\",\"totalCount\":\"全12话\",\"id\":5526,\"follow\":\"107.5 万\",\"view\":\"1763.3 万\",\"danmaku\":\"28.9 万\",\"coin\":\"5.7 万\",\"score\":9.1,\"des\":\"幽灵？那种东西不可能存在吧！\\n我闻悠太是高中2年生。\\n他运营着以一夜致富为目标的超自然汇总系营销博客“轻轻松松破假象”，为了将世上存在的多数超常现象以科学的解释来“干净利落地砍掉！”，而日夜挑战着超自...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"欢迎来到宇宙SHOW\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/01a09c8b7c182c8e503f111f1264ea0c8419c4d4.jpg\",\"totalCount\":\"全1话\",\"id\":21952759,\"follow\":\"3.3 万\",\"view\":\"23.0 万\",\"danmaku\":2240,\"coin\":1318,\"score\":9.3,\"des\":\"《欢迎来到宇宙SHOW》以被大自然包围着的小村庄·村川村为舞台，这里的一间小学包括新入学的小山夏纪也只有5名学生，但是他们也过着愉快的每一天。到了夏天合宿的时候，5名少年少女在学校集合，却为了寻找失踪...\",\"progress\":false,\"ep_status\":false,\"new_ep\":1},{\"title\":\"玻璃之花与崩坏的世界\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/9700b029a49731e3215d819871396f72a7544804.jpg\",\"totalCount\":\"全1话\",\"id\":3589,\"follow\":\"49.8 万\",\"view\":\"504.5 万\",\"danmaku\":\"4.9 万\",\"coin\":\"2.8 万\",\"score\":8.9,\"des\":\"无数的光芒闪耀着五颜六色，浮游在空中的无重力空间——“知识之箱”。\\n那里有着众多的世界、众多的时间、众多的人。\\n杜娅尔和多萝茜两人在那里与敌人战斗着。\\n敌人，那是侵食世界的存在——病毒。\\n被病毒污染的...\",\"progress\":false,\"ep_status\":false,\"new_ep\":1},{\"title\":\"人类衰退之后\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/25e4f053a67e96854f02fc3c26dacbe8b60476b4.jpg\",\"totalCount\":\"全12话\",\"id\":703,\"follow\":\"70.2 万\",\"view\":\"757.3 万\",\"danmaku\":\"8.2 万\",\"coin\":\"3.0 万\",\"score\":9.8,\"des\":\"【本片翻译由轻之国度字幕组提供】人类衰退之后故事描述人类在衰退之后经过了好几个世纪，一个成为了调停官的旧人类少女与新人类“精灵”之间交流的故事。\\n欢乐的地球大冒险，即将启程——\\n我们人类迎接缓慢的衰退...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"刻刻\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/4c8064cf5d498af081829e3d3ff2f589e3b254e3.jpg\",\"totalCount\":\"全12话\",\"id\":12592,\"follow\":\"127.6 万\",\"view\":\"2262.2 万\",\"danmaku\":\"28.2 万\",\"coin\":\"7.3 万\",\"score\":9.4,\"des\":\"佑河树里与无所事事的父亲和哥哥、养老的祖父、母亲、单亲妈妈的妹妹以及外甥一起生活。某天，她的哥哥与外甥遭人诱拐，为了拯救家人，树里的祖父使用佑河家代代相传的止界术将时间暂停，但没想到进入止界的树里一行...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"长歌行 动态漫\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/401b2627ddc0546c830794cc288a1cf5522a81ed.jpg\",\"totalCount\":\"全12话\",\"id\":2960,\"follow\":\"49.2 万\",\"view\":\"1153.6 万\",\"danmaku\":\"9.6 万\",\"coin\":\"10.5 万\",\"score\":9.6,\"des\":\"长歌行，夏达超越自我之作。作品以初唐为舞台，讲述了永宁公主李长歌活跃成长的历史题材故事。玄武门之变后，太子李建成及其党羽被诛，他的六个儿子除一人早卒外皆连坐，但历史上仅留下“长女李氏”和“次女闻喜县主...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"颠倒的帕特玛\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/badba652e88abae1db3e36111e43f9353eab5e48.jpg\",\"totalCount\":\"全1话\",\"id\":3668,\"follow\":\"36.6 万\",\"view\":\"301.2 万\",\"danmaku\":\"5.7 万\",\"coin\":\"2.4 万\",\"score\":9.7,\"des\":\" 那个世界，无论到哪里都在预料之外 \\n 无论哪里，无论哪里都是由隧道连接着的地下世界。虽然那里的人住在黑暗封闭的空间里，但他们却穿着防护衣过着宁静快乐的日子。地底集落的公主——帕特玛是爱在地下隧道...\",\"progress\":false,\"ep_status\":false,\"new_ep\":1},{\"title\":\"光之战记－ZUERST－\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/982bd05c6cebe14c05adce52c764e5b3a61c7a45.png\",\"totalCount\":\"全12话\",\"id\":28229886,\"follow\":\"35.0 万\",\"view\":\"381.3 万\",\"danmaku\":\"2.0 万\",\"coin\":\"1.7 万\",\"score\":9.4,\"des\":\"两位生活在正在进行迁都计划的巴鲁海特帝国的青年——\\n努力从事运输工作有点胆小的伊努玛尔，帝国的新手士兵不懂人情世故的雷欧卡迪欧。\\n一人想着重要的妹妹，一人想着作为士兵的前途，就这样在帝都生活着的日常。...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"在魔王城说晚安\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/43cebed282c8af72960ece8a35826467c2501d77.png\",\"totalCount\":\"全12话\",\"id\":28229876,\"follow\":\"319.9 万\",\"view\":\"8919.0 万\",\"danmaku\":\"50.3 万\",\"coin\":\"50.9 万\",\"score\":9.7,\"des\":\"从前，在那人与魔共同生活的时代。\\n魔王将人类公主掳走，幽禁在了自己的城堡里——。\\n被囚禁的栖夜莉丝公主，在囚牢中如此低语：“除了睡觉……没有别的事情干。”\\n公主从囚牢中偷偷逃出来，为了获得更优质的睡眠...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"天下第几\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/6a18ba8bb01c3c3318e21f7fdb6b46b05570d2f7.jpg\",\"totalCount\":\"全15话\",\"id\":5893,\"follow\":\"25.5 万\",\"view\":\"780.2 万\",\"danmaku\":\"7.3 万\",\"coin\":\"3.7 万\",\"score\":9.5,\"des\":\"当天下第一与天下第一恋爱，那这个需要被拯救的世界会怎样？\\n这是一个写作武侠读作少女的故事，套路与被套路，装逼与反装逼，这里就是天下。\\n敢问阁下天下第几？...\",\"progress\":false,\"ep_status\":false,\"new_ep\":15},{\"title\":\"奇诺之旅（2017）\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/2787e88c92d7f25a768af5c5cd26d1571bfaefe1.png\",\"totalCount\":\"全12话\",\"id\":2013,\"follow\":\"86.2 万\",\"view\":\"1115.7 万\",\"danmaku\":\"9.8 万\",\"coin\":\"5.9 万\",\"score\":9.8,\"des\":\"主人公——人类奇诺与会说话的摩托车汉密斯，毫无目的地在世界各处旅行。\\n在世界的各处有着充满个性的国度，人们在与自己相适应的法律与常识之下生活，奇诺与汉密斯造访各种这样的国度，基本上只停留3天，之后便出...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"夏目友人帐\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/99c549494d9425f6455bd45a151f4d26397d6151.png\",\"totalCount\":\"全13话\",\"id\":1660,\"follow\":\"375.4 万\",\"view\":\"6824.6 万\",\"danmaku\":\"288.6 万\",\"coin\":\"20.7 万\",\"score\":9.8,\"des\":\"夏目贵志生来拥有强大的灵力，能感知平常人所无法接触的妖怪神明的存在。因父母双亡，他多年间辗转于互相推卸责任的亲戚之间，又受到同龄人的欺负，未曾与任何人深交，造成性格一定程度上的孤僻。夏目本性和善，对于...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"神之塔\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b7ce6fd3aacb2edd1bd75e368e8838c2d768dab8.png\",\"totalCount\":\"全13话\",\"id\":28228355,\"follow\":\"216.9 万\",\"view\":\"6418.1 万\",\"danmaku\":\"54.6 万\",\"coin\":\"28.9 万\",\"score\":9.3,\"des\":\"只要登上塔，就能得到任何想要得东西。\\n塔顶上有着这世界上的一切，登上塔顶的人可以主宰这个世界……甚至成为神。\\n这是为了追逐星空而登塔的少女·蕾哈尔，\\n以及只要有了蕾哈尔就什么也不需要了的少年·第二十五...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"DARKER THAN BLACK -黑之契约者-\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/000134c3cf73f7ba6cf8406a26fa3a63942a24aa.png\",\"totalCount\":\"全26话\",\"id\":1064,\"follow\":\"186.9 万\",\"view\":\"3277.8 万\",\"danmaku\":\"67.9 万\",\"coin\":\"8.8 万\",\"score\":9.8,\"des\":\"某日，东京突然出现了异象——无法解析的领域“地狱门”。在那里，有着人们从未见过并持有着超能力的来访者。人们称这些来访者为“契约者”，他们有的失去心智，甚至会残酷地杀害人类……“契约者”们来到东京，究竟...\",\"progress\":false,\"ep_status\":false,\"new_ep\":26},{\"title\":\"刺客守则\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/63f236818c51f8f52dcf1b14c1892ed68affc4f3.png\",\"totalCount\":\"全12话\",\"id\":28222619,\"follow\":\"172.9 万\",\"view\":\"4291.2 万\",\"danmaku\":\"48.7 万\",\"coin\":\"12.0 万\",\"score\":6.5,\"des\":\"拥有名为玛那这一能力的贵族，肩负着保护人类这一使命。就读于能力者育成学校的贵族，却没有一点玛那的特殊少女梅莉达·安杰尔。为了发掘她的才能，库法·梵皮尔被派来担任她的家庭教师。\\n他同时也肩负“倘若确认她...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"白猫计划 零之纪元\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/c645405250676adc52afaadec4f6d5bca0ac6dca.png\",\"totalCount\":\"全12话\",\"id\":28228410,\"follow\":\"45.5 万\",\"view\":\"843.9 万\",\"danmaku\":\"7.5 万\",\"coin\":\"2.1 万\",\"score\":4.8,\"des\":\"很久很久以前的时代，天空中白色王国，与地上的黑色王国，保持着“均衡”并同时“循环”着。\\n有一天，在黑色王国因被怪物袭击而毁灭的村子里，一位少年正在挖坟墓。在那个少年面前出现了上一代黑暗之王候选人史基亚...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"ISLAND\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/db6e926d8860a995905845a8f592669840942344.jpg\",\"totalCount\":\"全12话\",\"id\":102292,\"follow\":\"182.2 万\",\"view\":\"3249.4 万\",\"danmaku\":\"35.8 万\",\"coin\":\"12.5 万\",\"score\":9.2,\"des\":\"远离本土、漂浮在海洋中的“浦岛”。那里有让人错认为是天国的富裕的自然资源，以及有被复杂的过去和古老的习俗所束缚的人们生活着。\\n在这块被本土抛弃、被逐渐遗忘的土地上，居民们几乎不抱任何希望地在生活着。\\n...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12}],\"watched\":[{\"title\":\"孤独摇滚！\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/d9d6284e0919ecfda41981c1f9119f993db62935.jpg\",\"totalCount\":\"全12话\",\"id\":28339735,\"follow\":\"402.9 万\",\"view\":\"1.7 亿\",\"danmaku\":\"82.0 万\",\"coin\":\"153.5 万\",\"score\":9.9,\"des\":\"绰号“小孤独”的后藤独，是一个喜爱吉他的孤独少女。经常在家里独自弹奏吉他，但因为一些事情，加入了伊地知虹夏领衔的“纽带乐队”。不敢在他人面前演奏的后藤，能否成为一个出色的乐队成员呢……...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"喜羊羊与灰太狼之羊村守护者\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/7ead54c7d4dcf6b0eb5b80e26c3cbdc34854f436.jpg\",\"totalCount\":\"全60话\",\"id\":28227842,\"follow\":\"91.0 万\",\"view\":\"1.4 亿\",\"danmaku\":\"174.1 万\",\"coin\":\"24.0 万\",\"score\":9.8,\"des\":\"狼将军利用功能各异的神奇法宝强化七大恶狼攻打羊村。为保羊村安全，众羊出发寻找赶跑狼将军的方法，却意外获得羊族前辈的神奇武器。一路上，小羊们用神奇的装备打退了群狼的一次次阴谋和攻击，而灰太狼在这过程中也...\",\"progress\":false,\"ep_status\":false,\"new_ep\":60},{\"title\":\"风灵玉秀\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/c1cb16bbd7d13aa3a68c1b7a8178a4f541fab3f6.png\",\"totalCount\":\"全26话\",\"id\":6038,\"follow\":\"315.1 万\",\"view\":\"1.2 亿\",\"danmaku\":\"103.5 万\",\"coin\":\"205.4 万\",\"score\":9.8,\"des\":\"随着白发少女白钰袖身世的逐渐展开，越来越多的江湖异事向她而来。事件的指向总是绕不开那个叫做红阳血精的武林禁物，不单单是白钰袖，就连风铃儿、南笙、崔玉都开始与之牵连起来。一切的一切，似巧合又不是巧合……...\",\"progress\":false,\"ep_status\":false,\"new_ep\":26},{\"title\":\"凹凸世界 第四季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/55285d9059494f3fed0e71f2d66eaa70924fe020.png\",\"totalCount\":\"全20话\",\"id\":28237101,\"follow\":\"347.1 万\",\"view\":\"2.0 亿\",\"danmaku\":\"154.0 万\",\"coin\":\"63.2 万\",\"score\":8.6,\"des\":\"凹凸大赛将迎来尾声，\\n众人也由此走向命运的分叉口。\\n金终于获知了关于姐姐的消息，格瑞也走到了真相面前，鬼狐找到了大赛的漏洞联合了嘉德罗斯小队与雷狮海盗团，安迷修的骑士之道上出现了曾经的引路人，艾比带着...\",\"progress\":false,\"ep_status\":false,\"new_ep\":20},{\"title\":\"雾山五行\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/c6d4a6d2f601aceb3b18124352e3cebd4c6e2e02.png\",\"totalCount\":\"全7话\",\"id\":28228714,\"follow\":\"869.8 万\",\"view\":\"4.0 亿\",\"danmaku\":\"212.0 万\",\"coin\":\"1517.6 万\",\"score\":9.9,\"des\":\"雾山中封印着中国古代传说中的上古麒麟，由五个掌握金、木、水、火、土五行力量家族世代守护。闻人翊悬为救母亲私自打开了巨阙神盾，使小麒麟走失，终于在地膳村寻回了小麒麟并将他带回雾山。消息传开以后，妖兽们虎...\",\"progress\":false,\"ep_status\":false,\"new_ep\":7},{\"title\":\"约定的梦幻岛\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/65f89e0a0d050ff987159829fcf565faae199d08.png\",\"totalCount\":\"全12话\",\"id\":5267750,\"follow\":\"374.4 万\",\"view\":\"8780.8 万\",\"danmaku\":\"98.0 万\",\"coin\":\"51.0 万\",\"score\":9.8,\"des\":\"仰慕的母亲并非亲生母亲。一起生活的他们并非兄弟。\\nGrace=Field House是没有父母的孩子们居住的地方。虽然没有血缘关系，但妈妈和38个兄弟都度过了幸福的每一天，这是不可替代的家。\\n但是，他...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"电器少女\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/5fbf484d9b34ef02b03fda6556a4ad785c00aeff.jpg\",\"totalCount\":\"全12话\",\"id\":20135810,\"follow\":\"18.5 万\",\"view\":\"577.6 万\",\"danmaku\":\"1.6 万\",\"coin\":\"4.7 万\",\"score\":9.8,\"des\":\"梁西瓜是一名在城市夹缝中辛苦谋生的贫寒青年。某一日，陪伴他许多个孤单寒暑的老式冰箱竟然化成人形，强势介入了他的生活。他们因食物针锋相对，为生计绞尽脑汁，互相拖累又互相扶持，碰撞出许多令人啼笑皆非的日常...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"间谍过家家 中配版\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b35f2f8e9a445e1b7d1db1e9053ea0f70bd35527.png\",\"totalCount\":\"全25话\",\"id\":28340196,\"follow\":\"956.1 万\",\"view\":\"5115.7 万\",\"danmaku\":\"12.5 万\",\"coin\":\"5.6 万\",\"score\":8.9,\"des\":\"每个人都有不可告人的一面。\\n\\n这是一个世界各国均暗地里进行激烈情报战的时代。奥斯塔尼亚（Ostania）与维斯达利斯（Westalis）的冷战状态已经持续数十年。\\n\\n是维斯达利斯情报局奥斯塔尼...\",\"progress\":false,\"ep_status\":false,\"new_ep\":25},{\"title\":\"凹凸世界 第三季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/8155078332f0d9ce724eda922a14c0f7c9c826ca.jpg\",\"totalCount\":\"全40话\",\"id\":4315962,\"follow\":\"254.7 万\",\"view\":\"4.4 亿\",\"danmaku\":\"630.9 万\",\"coin\":\"115.1 万\",\"score\":9.4,\"des\":\"凹凸世界的创世神是一位很肆意随性的神明，他创造了凹凸世界的无数星球和人民，又随心所欲地统治着他们。同时他还设立了七神使，让他们代行神旨。\\n但是，创世神也不是完全不给他的子民机会——只要在“凹凸大赛”中...\",\"progress\":false,\"ep_status\":false,\"new_ep\":40},{\"title\":\"我的三体之罗辑传\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b2274c5efb1d7b8685cf8bdf3b347c42f1c7731f.jpg\",\"totalCount\":\"全11话\",\"id\":28223558,\"follow\":\"102.5 万\",\"view\":\"8127.2 万\",\"danmaku\":\"78.0 万\",\"coin\":\"227.3 万\",\"score\":9.9,\"des\":\"《我的三体》系列是一部粉丝自制的动画番剧，改编自刘慈欣的科幻小说《三体》。第二季《我的三体·罗辑传》共11集，讲述人类在科技水平被锁死的情况下，选出“面壁者”试图抵抗三体人的侵略的故事。截止到2018...\",\"progress\":false,\"ep_status\":false,\"new_ep\":11},{\"title\":\"幻界战线\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/2bdc085a0b514276539fafda97e4043f5ea641bb.jpg\",\"totalCount\":\"全12话\",\"id\":1553,\"follow\":\"280.1 万\",\"view\":\"7723.0 万\",\"danmaku\":\"99.9 万\",\"coin\":\"18.9 万\",\"score\":9.6,\"des\":\"纽约崩坏后，一夜之间便架构成了名为“赫尔沙雷姆兹·罗特”的城市。在连系着异世界与现世界的这个魔都里，有个为了保持世界的平衡而在暗地里非常活跃的组织——秘密结社·莱布拉。\\n少年雷欧纳鲁德·渥奇在一连串的...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"凹凸世界 第一季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/0322eb656e2d745b9cd118bbe6297b82a1b13c08.jpg\",\"totalCount\":\"全32话\",\"id\":3043,\"follow\":\"153.8 万\",\"view\":\"1.9 亿\",\"danmaku\":\"161.0 万\",\"coin\":\"31.0 万\",\"score\":8.8,\"des\":\"凹凸世界的创世神是一位很肆意随性的神明。他创造的世界生而不平等，只有参加凹凸大赛才有机会改变命运。参赛者将得到系统赐予的“特殊能力”，并锻炼运用各自的能力不断闯关战斗。只要能在凹凸大赛中获得最终的胜利...\",\"progress\":false,\"ep_status\":false,\"new_ep\":32},{\"title\":\"嗜谎之神\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/d015c27a5cd9bae28fa0821aff2fb4519af2ecd4.jpg\",\"totalCount\":\"全13话\",\"id\":4315822,\"follow\":\"67.8 万\",\"view\":\"2301.9 万\",\"danmaku\":\"13.2 万\",\"coin\":\"5.1 万\",\"score\":7.7,\"des\":\"世界能源枯竭后，人们新建了巨型城市——绯斯市。绯斯市的中学生乌明路因撒谎次数过多被城市“系统”判定为恶人，并遭到邪恶物种“业障”的攻击。绯斯市派出谎言监察者怜恩来帮助乌明路“矫正”恶习。然而两人相遇后...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"国王排名\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/8aead7650fb3ded88f24654b7b66823169cb9a8c.png\",\"totalCount\":\"全23话\",\"id\":28235154,\"follow\":\"898.3 万\",\"view\":\"5.1 亿\",\"danmaku\":\"257.3 万\",\"coin\":\"264.0 万\",\"score\":7,\"des\":\"国家的丰饶、麾下勇者的数量、\\n以及国王本人如何像勇者一般强大，\\n这些要素的综合排名，便是所谓的“国王排名”。\\n主人公波吉是国王排名第七名的伯斯王治下王国的第一王子。\\n但是波吉却生来又聋又哑，贫弱到挥不...\",\"progress\":false,\"ep_status\":false,\"new_ep\":23},{\"title\":\"罗小黑战记\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/b00ab23001f8b73e7ed09fe55c1af14781f27d14.png\",\"totalCount\":\"未完结\",\"id\":1733,\"follow\":\"731.1 万\",\"view\":\"6.5 亿\",\"danmaku\":\"278.9 万\",\"coin\":\"400.8 万\",\"score\":9.9,\"des\":\"猫妖小黑盗取天明珠被谛听发现，被打回原形重伤而逃，在流落街头之时被罗小白带回了家，起名罗小黑。\\n有一天小黑突然变成了人形，告诉小白自己要暂时离开去完成师父交给自己的任务。却在离开之后因为师父交给自己的...\",\"progress\":false,\"ep_status\":false,\"new_ep\":\"40\"},{\"title\":\"幻界战线 & BEYOND\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/bb264d8a63e2d152ba795a1c15314cdf49d7fb49.jpg\",\"totalCount\":\"全12话\",\"id\":6439,\"follow\":\"199.5 万\",\"view\":\"4708.4 万\",\"danmaku\":\"42.3 万\",\"coin\":\"16.3 万\",\"score\":9.8,\"des\":\"曾经被称为纽约的城市，仅仅一晚便消失无踪。\\n出现在那里的城市“赫尔沙雷姆兹·罗特”。在浓雾的另一侧展开，连结“异世界”与现世的这一地区，变化成了各怀心思的人们所跋扈的“地球上最危险的城市”。\\n为了保护...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"凹凸世界 第二季\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/0d1c91e348c51564c4788d2eb23b0f31de905a99.jpg\",\"totalCount\":\"全20话\",\"id\":6352,\"follow\":\"117.0 万\",\"view\":\"1.1 亿\",\"danmaku\":\"160.2 万\",\"coin\":\"20.7 万\",\"score\":9,\"des\":\"凹凸世界的创世神是一位很肆意随性的神明。他创造的世界生而不平等，只有参加凹凸大赛才有改变命运的机会。参赛者将得到大赛系统赐予的“特殊能力”，并锻炼运用各自的能力不断闯关战斗。只要能在凹凸大赛中获得最终...\",\"progress\":false,\"ep_status\":false,\"new_ep\":20},{\"title\":\"美丽新世界 The Animation/美好世界\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/ba927aedf4af8905023ed41dbf1808ed32c297fd.png\",\"totalCount\":\"全12话\",\"id\":28233920,\"follow\":\"32.5 万\",\"view\":\"388.0 万\",\"danmaku\":\"1.3 万\",\"coin\":\"1.1 万\",\"score\":8.9,\"des\":\"奔走于“涩谷”的街市，在为时7日的「死神游戏」中存活下来!!\\n\\n在涩谷十字路口醒来的主人公·音操。\\n那里是与现实的涩谷相重合的异次元“UG（Underground）”。\\n音操阴差阳错地成为了「死神游戏...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"怪物事变\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/3557b7261e17dd4d4a1e5f1f102f0f3cbecd10a0.png\",\"totalCount\":\"全12话\",\"id\":28231884,\"follow\":\"262.0 万\",\"view\":\"5647.3 万\",\"danmaku\":\"45.9 万\",\"coin\":\"31.8 万\",\"score\":9.6,\"des\":\"自古以来便潜藏于世，隐藏身份与人交往的「怪物」。\\n它们大多数已适应人类世界，融入进了人类社会。\\n然而到了现代，多起报告称它们之中有想要与人类进行超出所需要的交往的情况。\\n\\n经营着侦探事务所的隐神，为探...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"凹凸学园\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/e103d8eaf7bb1439c76035cac057cfcb32fd7b93.jpg\",\"totalCount\":\"全15话\",\"id\":28221892,\"follow\":\"47.9 万\",\"view\":\"6949.7 万\",\"danmaku\":\"57.5 万\",\"coin\":\"12.8 万\",\"score\":9.5,\"des\":\"故事以凹凸学园的初中部与高中部为舞台，描写围绕着刚升入高一的新生——金与他身边的同学之间，轻松有趣的搞笑向日常生活。凹凸学园里有着形形色色性格各异、古怪却也不失可爱的学生，而本作采用平行式的单元小故事...\",\"progress\":false,\"ep_status\":false,\"new_ep\":15},{\"title\":\"Charlotte\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/9c3e77244687a81e4b75e88ec22eeb8dbaa26380.jpg\",\"totalCount\":\"全13话\",\"id\":2572,\"follow\":\"609.5 万\",\"view\":\"2.1 亿\",\"danmaku\":\"272.3 万\",\"coin\":\"119.4 万\",\"score\":9.5,\"des\":\"思春期的少年少女中极少部分人会发作的特殊能力。\\n驱使着无人知晓的能力，过着顺风顺水学园生活的乙坂有宇。\\n突然出现在这样的他的面前的少女，友利奈绪。\\n从与她相遇的那一天起，被揭露出特殊能力者的宿命。\\n这...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"真理面具 动态漫\",\"type\":\"国创\",\"area\":\"中国大陆\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/dde99d302d47621ede5aa75aebad612cc0fa71a0.jpg\",\"totalCount\":\"全20话\",\"id\":28230621,\"follow\":\"50.1 万\",\"view\":\"2444.8 万\",\"danmaku\":\"5.1 万\",\"coin\":\"17.8 万\",\"score\":9.8,\"des\":\"高中生无免偶然获得了一副戴上后无论做什么都会被人绝对认同的面具，然而即便如此他也没能鼓起勇气向暗恋的女生告白。直到发生那个将他的生活完全颠覆的事件……...\",\"progress\":false,\"ep_status\":false,\"new_ep\":20},{\"title\":\"魔女之旅\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/09533e0b510630235326a818adabb6c64c1abce2.png\",\"totalCount\":\"全12话\",\"id\":28229881,\"follow\":\"449.2 万\",\"view\":\"1.2 亿\",\"danmaku\":\"135.5 万\",\"coin\":\"116.2 万\",\"score\":9.7,\"des\":\"某个地方有一位旅人，她的名字是伊蕾娜。\\n是一位年纪轻轻就成了魔法使中最上位「魔女」的天才。\\n因为向往着幼时读过的旅行故事，随意地进行着漫长的旅行。\\n在这个广阔的世界里自由地漫步，接触着形形色色有趣的人...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12},{\"title\":\"异度侵入 ID:INVADED\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/image/9bf9e66968f85b33ec3769a16c86b36dc984abbc.png\",\"totalCount\":\"全13话\",\"id\":28224080,\"follow\":\"509.1 万\",\"view\":\"1.3 亿\",\"danmaku\":\"156.6 万\",\"coin\":\"111.8 万\",\"score\":9.8,\"des\":\"本片讲述利用能检测出人们杀意的装置以及利用思想粒子做出的“井”，来探知事件真相的科幻故事。...\",\"progress\":false,\"ep_status\":false,\"new_ep\":13},{\"title\":\"黑执事\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/ffcbbb5536dee729d14413a840556a8a4fbcdd6c.jpg\",\"totalCount\":\"全24话\",\"id\":67712,\"follow\":\"245.4 万\",\"view\":\"6013.8 万\",\"danmaku\":\"251.4 万\",\"coin\":\"14.1 万\",\"score\":9.8,\"des\":\"时值19世纪，在英国名门贵族凡多姆海伍家，有一位神秘、优雅、十全十美的执事，他就是“黑执事” 塞巴斯蒂安。虽然塞巴斯蒂安总是淡淡地说： “我只是一名执事罢了”，但举止、知识、品味、料理、武术等等没有任...\",\"progress\":false,\"ep_status\":false,\"new_ep\":24},{\"title\":\"黑执事II\",\"type\":\"番剧\",\"area\":\"日本\",\"cover\":\"https://image.baidu.com/search/down?url=https://i0.hdslb.com/bfs/bangumi/42b3d6d1e7a62d165cdf17e00495352c28e86e72.jpg\",\"totalCount\":\"全12话\",\"id\":8312,\"follow\":\"116.5 万\",\"view\":\"2225.7 万\",\"danmaku\":\"114.9 万\",\"coin\":\"5.4 万\",\"score\":9.5,\"des\":\"目前在「月刊GFantasy」上连载中的漫画作品「黑执事」（作者：枢やな），曾于08年10月改编为TV动画，但在漫画尚未完结的情况下，当时的动画版也只能以模棱两可的结局收场。即将于今夏开播的「黑执事I...\",\"progress\":false,\"ep_status\":false,\"new_ep\":12}]}"},{"title":"","date":"2024-11-05T11:02:02.761Z","updated":"2024-08-30T13:48:22.000Z","comments":true,"path":"about/index.html","permalink":"https://changakira.github.io/about/index.html","excerpt":"","text":"你好呀！ 我是默元，很高兴认识你。 注：博客封面图是bilibili 2023拜年祭-新春电子画集-十二年同人贺图的“庙会”，来自抹茶專門店AM。 请联系我！博客网站首页GitHub首页Gitter聊天室邮箱BiliBili 小玩意儿小玩意儿 生命周期 &#x2F; 大事记 2022_08_30 建站。然后被奇怪的小比赛打击到了。 2023_07_20 默元的网站打赢复活赛了！建站（二周目）。 2024_02_07 默元发布龙年大吉一号重要演讲。开始高频率（存疑）更新。 2024_08_30 默元发布建站二周年重要演讲。默元大赦天下，普天同庆。 ６．》更将说，＿ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ＜＞｛｝「」！＃＄％＆’（）＝～『』【 做， 你要将《小说》的文件夹重命名为《回忆》，是更改文件夹名称"},{"title":"所有分类","date":"2024-11-05T11:02:02.761Z","updated":"2023-07-21T10:19:50.000Z","comments":true,"path":"categories/index.html","permalink":"https://changakira.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2024-11-05T11:02:02.761Z","updated":"2023-07-25T13:17:48.000Z","comments":true,"path":"friends/index.html","permalink":"https://changakira.github.io/friends/index.html","excerpt":"","text":"当当！友情链接页！ dreamskycx的博客。 晨曦，同我一样，是西电计算机学生。是一个纯正的卷饼，这同我不一样。 “人生所有的精彩，往往源于不起眼的开始。” 耀韬的世外桃源。 武汉大学计算机。同我一样，来自某驰名海内外高中（什 是一个纯正的卷饼，这同我不一样。（博客页有他帅照desu） “从来没有真正的绝境，只有心灵的迷途。” 添加友链，请联系我！🥰"},{"title":"","date":"2024-11-05T11:02:02.917Z","updated":"2024-08-03T13:02:58.000Z","comments":true,"path":"mystic/index.html","permalink":"https://changakira.github.io/mystic/index.html","excerpt":"","text":"传说在默元的母校 有这样一间神秘的店铺…… 魔法屋建设中，无关人员不得入内 禁止在晚上十点以后靠近施工现场 无关人员不得入内。 禁止在晚上十点以后靠近施工现场。 无关人员不得入内。 禁止在晚上十点以后靠近施工现场。 进入施工核心区，持通行证通行 500m后进入检查站 ………… 欸？有人来了吗？ 客官您好！请问您想要点什么呢？ &gt;··&gt; 我要占卜 &gt;··&gt; 我要买魔法道具 &gt;··&gt; 我要逛逛秘境 &gt;··&gt; 我要阅读魔导书 &gt;··&gt; 我要找店主！"},{"title":"","date":"2024-08-29T16:00:00.000Z","updated":"2024-08-29T16:00:00.000Z","comments":true,"path":"others/2th_happy_birthday.html","permalink":"https://changakira.github.io/others/2th_happy_birthday.html","excerpt":"","text":"HALOW WORD! 两周岁生日快乐！ 听歌 Your browser does not support the video tag. 喝饮料 啊，你的浏览器不支持！？ 窝请你喝饮料！想喝多少都可以！ 畅聊一 &#x2F; 杂乱无章二 &#x2F; 少即是多三 &#x2F; 断言四 &#x2F; 十日章五 &#x2F; 何为默元六 &#x2F; 桌前闲影忙七 &#x2F; 曾经的可能八 &#x2F; 惯常之事，推脱之辞九 &#x2F; 小人物，大人物十 &#x2F; 匆忙流逝INFOS 视频信息 https://www.bilibili.com/video/BV1nP4y1W7dr/专辑首发单曲《石头歌》（网络先行版）唱&#x2F;人声编辑：三无Marblue词&#x2F;曲&#x2F;编&#x2F;PV：ilem 本文信息 本文为庆祝该网站的两周岁生日而作零散写了一些近年感悟8月20日落笔写下目录而它的完成遥遥无期你知道的，我是超级鸽王目录写完后立即发在了QQ空间感谢朋友们对我一直以来的支持 你好，世界 我已经 “你好，世界” 了两年默元也很好你好，默元"},{"title":"","date":"2024-11-05T11:02:02.932Z","updated":"2024-08-09T08:22:34.000Z","comments":true,"path":"projects/index.html","permalink":"https://changakira.github.io/projects/index.html","excerpt":"","text":"各项目简介一 现代无人机系统原理与实践为校企合作创新创业课程。该实践课程主要介绍了现代无人机的基本原理，并提供了动手制作四旋翼无人机的材料和平台。 遥控器电路板3D效果图机身电路板3D效果图 本人在其中承担焊接与调试任务。由于资料残缺，该项目无法开源。 二 Learning_Assistant星火杯二等奖作品记录。这是一个基于Arduino UNO板的有一些有趣功能的学习小助手。 开源地址项目开源于Github。 源码与PCB工程文件开源地址https://github.com/ChangAkira/Learning_Assistant.git About这是大一参加星火杯的作品。由于年代较久，且当时并没有上传、记录的意识，导致留下的痕迹较为残缺，实物也已经无法启动。所幸我仍在U盘中找到了 疑似是 最终成品的源代码，实物外表也完好无损，因此依然存在着开源的可能。 这是我最早期的作品，回看感慨万千。 实物图实物图 实物图。图中涂抹部分为姓名学号。整体体积不大，6.2&#x2F;*7.1&#x2F;*1.6cm，约等于小型游戏机。 原理图与PCB效果图点击查看大图。 原理图PCB效果图 功能列表 基于RTC DS3231模块的实时时钟、计时器、闹钟功能。 储存在数组中，利用tone播放《欢乐颂》曲调的音乐功能。 自由演奏音乐功能。 一个简单的接小球小游戏。 感兴趣的话，可以在上文开源地址中阅读更多详细内容。 三 基于Hexo框架搭建的个人博客就是现在这个网站啦。这个网站也重开过，虽然现在只是偶尔写写博客，但索性也没有完全荒废掉。 网站全部源码开源于Github。 网站源码https://github.com/ChangAkira/ChangAkira.github.io.git 四 电磁态势感知平台该项目基于Qt、HackRF开发板，我在其中承担绝大部分软件部分工作：图形化界面、数据处理、天线收发控制、上位机下位机配合。 该项目不开源。 五 Volantis AssistantAboutVolantis是Hexo框架的一个主题，官方网站Volantis. Volantis主题提供一些插件等的快捷写法以及很多主题带来的元素效果。仅以插入图片来说，有四五种效果、功能不尽相同的写法。我在写自己的博客时，经常需要一边看Volantis文档一边写。有一次，我在网上学了一种前端效果并用在自己的博客文章中，后来才发现Volantis已经有该效果插件，不需要自己再写。这些增加了作者的书写量，带来了一些重复性的工作，作者需要记忆相当量的MarkDown“方言”。于是我编写了这样一个工具，使常用的一些非标准MarkDown写法插入变得简单。 该工具简化了博客书写过程，让作者更加专注于内容本身的书写。通过配置规则集文件，也可以适用于其它主题。 开源与下载地址本项目全部代码开源于Github，使用Qt5.7.1.0框架编写。可以从GitHub获取软件压缩包，也可以通过夸克网盘分享文件下载，提取码：hdD4。 开源地址https://github.com/ChangAkira/Volantis_Assistant.git 长期更新维护。 六 Datawhale-AI夏令营参与Datawhale-AI夏令营2024年第三期“复杂能力推理方向”，在其团队带领下进行了大模型技术方案精读、进阶与优化。 笔记链接https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"title":"所有标签","date":"2024-11-05T11:02:02.948Z","updated":"2023-07-21T10:19:52.000Z","comments":true,"path":"tags/index.html","permalink":"https://changakira.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2024-11-05T11:02:03.980Z","updated":"2024-08-24T13:53:38.000Z","comments":true,"path":"yi/TV_series/index.html","permalink":"https://changakira.github.io/yi/TV_series/index.html","excerpt":"","text":""},{"title":"","date":"2024-11-05T11:02:03.980Z","updated":"2024-08-24T13:53:38.000Z","comments":true,"path":"yi/books/index.html","permalink":"https://changakira.github.io/yi/books/index.html","excerpt":"","text":""},{"title":"","date":"2024-11-05T11:02:03.980Z","updated":"2024-08-24T13:53:38.000Z","comments":true,"path":"yi/cards/index.html","permalink":"https://changakira.github.io/yi/cards/index.html","excerpt":"","text":""}],"posts":[{"title":"庆祝一下！","slug":"2th-celebration","date":"2024-08-29T16:00:00.000Z","updated":"2024-08-29T16:00:00.000Z","comments":true,"path":"2024/08/30/2th-celebration/","link":"","permalink":"https://changakira.github.io/2024/08/30/2th-celebration/","excerpt":"HALOW WORD! 两周岁生日快乐！","text":"HALOW WORD! 两周岁生日快乐！ 听歌 Your browser does not support the video tag. 喝饮料 啊，你的浏览器不支持！？ 窝请你喝饮料！想喝多少都可以！ 畅聊一 &#x2F; 杂乱无章二 &#x2F; 少即是多三 &#x2F; 断言四 &#x2F; 十日章五 &#x2F; 何为默元六 &#x2F; 桌前闲影忙七 &#x2F; 曾经的可能八 &#x2F; 惯常之事，推脱之辞九 &#x2F; 小人物，大人物十 &#x2F; 匆忙流逝今日全新上线：安利墙“‘一’系列”顶部导航栏“‘一’系列”直达！ 一 &#x2F; 一张纸一 &#x2F; 一本书一 &#x2F; 一部番INFOS 视频信息 https://www.bilibili.com/video/BV1nP4y1W7dr/专辑首发单曲《石头歌》（网络先行版）唱&#x2F;人声编辑：三无Marblue词&#x2F;曲&#x2F;编&#x2F;PV：ilem 饮料信息 该动画取自公众号《前端嘛》，其演示网站地址https://www.fecoder.cn/code-fun/sprite-or-cola-animation-demo 本人对其做少量修改，以iframe形式放在博客某页面上。主要调整内容：调整了杯子大小、杯子圆角、水果大小、气泡大小、气泡速率、吸管大小与倾斜角。 本文信息 本文为庆祝该网站的两周岁生日而作零散写了一些近年感悟8月20日落笔写下目录而它的完成遥遥无期你知道的，我是超级鸽王目录写完后立即发在了QQ空间感谢朋友们对我一直以来的支持 你好，世界 默元也很好你好，默元","categories":[{"name":"庆典","slug":"庆典","permalink":"https://changakira.github.io/categories/%E5%BA%86%E5%85%B8/"}],"tags":[{"name":"庆典","slug":"庆典","permalink":"https://changakira.github.io/tags/%E5%BA%86%E5%85%B8/"}]},{"title":"bilibili-card 视频卡片","slug":"bilibili-card-test","date":"2024-08-22T12:21:13.000Z","updated":"2024-08-25T10:22:22.000Z","comments":true,"path":"2024/08/22/bilibili-card-test/","link":"","permalink":"https://changakira.github.io/2024/08/22/bilibili-card-test/","excerpt":"Hexo一个插入bilibili视频链接卡片的插件。","text":"Hexo一个插入bilibili视频链接卡片的插件。 演示效果 Your browser does not support the video tag. 超爱这首的！ 代码&#123;% bilibili_card BV1nP4y1W7dr video %&#125; &lt;!-- 这是插件用法 --&gt; &lt;br/&gt; &lt;!-- 一个空行 --&gt; &#123;% video /videos/石头歌.mp4 %&#125; &lt;!-- Volantis主题插入本地视频的写法 --&gt; 为啥用这个插件？在我们写文章时，经常会有插入B站视频的需求。 点击B站视频下方的分享按钮生成的代码，形如： &lt;iframe src=&quot;//player.bilibili.com/player.html?isOutside=true&amp;aid=889743543&amp;bvid=BV1nP4y1W7dr&amp;cid=386543997&amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; height=&quot;450&quot; width=&quot;750&quot;&gt;&lt;/iframe&gt; 此处height&#x3D;”450” width&#x3D;”750”为自行添加的，直接复制B站给的代码里没有。 效果如： 它有几个问题：一是由于不登陆而导致不能高清，二是很乱、很丑，三是把播放器也拿来了，很不好！四是一不小心就会跳到B站去。还会自动播放！ 这时候，聪明的人们就开始研究这串代码，并立即发明了直接给出视频链接的iframe。这时候你会发现：网页竟然会立马自己重定向到B站去！ 人们研究了很多方法，最后这些方法却都失效了。 于是人们迫不得已自己下载B站视频、再放到自己网页上。这时候，善良的人们就会标注好视频来源。 但是！这明显算是一种转载。看着视频上方写的那行小字，你的良心不会痛吗！ 🚫未经作者授权，禁止转载 但是！我们都知道，直接转B站链接，就是可以的。而上文中的B站代码，本质不也是一种放视频、并且你可以跳转到B站原视频地址的东西嘛！ 于是聪明的我将本地视频和B站视频卡片结合起来使用。 我好，阅读文章的人好，视频原作者好，只有B站受伤的世界达成了——它不能那么轻易的引流了！也不能限制视频分辨率了！ 完美。 插件地址插件在GitHub的地址https://github.com/wherewhere/hexo-tag-bilibili-card 为啥不用真正的B站视频插件？如 hexo-tag-bili 。 hexo-tag-bili在GitHub的地址https://github.com/honjun/hexo-tag-bili 答：太丑了。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://changakira.github.io/categories/hexo/"},{"name":"插件","slug":"hexo/插件","permalink":"https://changakira.github.io/categories/hexo/%E6%8F%92%E4%BB%B6/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/tags/Hexo/"}]},{"title":"Volantis主题外部.md引用详解","slug":"Volantis主题外部-md引用详解","date":"2024-08-17T11:47:54.000Z","updated":"2024-08-25T10:22:18.000Z","comments":true,"path":"2024/08/17/Volantis主题外部-md引用详解/","link":"","permalink":"https://changakira.github.io/2024/08/17/Volantis%E4%B8%BB%E9%A2%98%E5%A4%96%E9%83%A8-md%E5%BC%95%E7%94%A8%E8%AF%A6%E8%A7%A3/","excerpt":"Volantis 标签插件 在局部渲染外部md文件 用法详解","text":"Volantis 标签插件 在局部渲染外部md文件 用法详解 官方文档地址https://volantis.js.org/v5/tag-plugins/?keyword=%E5%A4%96%E9%83%A8md 在局部渲染外部md文件 为什么？首先我们来说什么叫“外部md文件”，这个指的其实是我们网站外部的文件，比如官方文档中的链接https://gcore.jsdelivr.net/gh/volantis-x/hexo-theme-volantis/README.md。 但是大家既然用着gitpages和hexo搭建博客，想来是没有自己服务器的，而且也不想这里上传一些文件那里上传一些文件吧……如果我们可以就在博客目录下存放我们的md文件，然后随着网页一起更新到GitHub上怎么样呢？ 其实外部md文件的目的是保证hexo对该文件夹下的文件不进行渲染。我们知道，当我们输入hexo g回车的时候，我们写的页面.md文件就会被渲染为.html文件，然后hexo d上传到GitHub。所以我们可以在保证.md文件不被渲染的情况下，将.md文件保存在博客目录下。 怎么做？参考 Hexo创建自定义的html页面 ，原理是一样的。 首先在博客source目录下创建一个叫md的文件夹。（放别的位置也可以，放在这里便于管理） 文件夹准备 在里面放上你的.md文件。 放上.md文件 在主题的或hexo的_cofig.yml中修改 skip_render 项（若（主题的）_config.yml中没有这一项，在合适的地方添加即可）。在 skip_render： 后面加上要跳过渲染的文件夹名称。接下来我们就以source目录下的md文件夹举例。 修改方式有几种： skip_render: md/xxxx.md 只跳过该文件的渲染 skip_render: md/* 单个文件夹下的全部文件 skip_render: md/*.md 该文件夹下某一类型的全部文件 skip_render: md/** 该文件夹下的全部子文件夹和文件 skip_render: - &#39;md1/*.md&#39; - &#39;md2/**&#39; 多个文件夹或其它复杂情况 以上修改中，若写为单行（1~4的情况），则不需要加引号。写为多行（5）的情况，则需要加引号，单引号双引号均可。 另外，单行的也可以写成多行的便于以后增添或删除，注意添加引号，如情况2也可以写作： skip_render: - &#39;md/*&#39; 那么在使用的时候，我们可以写相对路径。如： &#123;% md /md/md_example.md %&#125; md_example.md是我的文件名。内容是： 随便写了点内容 效果如下： (()=>{ volantis.css(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/github-markdown-css/github-markdown.css\"); const contentEl = document.getElementById(\"md-e46f6391-0efc-7c8a-8c91-4b6a97c6b264\"); const loadMarkdown = (url) => { if (!window.fetch) { contentEl.innerHTML = 'Your browser outdated. Please use the latest version of Chrome or Firefox!您的浏览器版本过低，请使用最新版的 Chrome 或 Firefox 浏览器！'; } else { contentEl.innerHTML = 'Loading ... | 加载中。。。'; fetch(url, { method: \"GET\" }) .then((resp) => { return Promise.all([ resp.ok, resp.status, resp.text(), resp.headers, ]); }) .then(([ok, status, data, headers]) => { if (ok) { return { ok, status, data, headers, }; } else { throw new Error(JSON.stringify(json.error)); } }) .then((resp) => { let data = marked.parse(resp.data); contentEl.innerHTML = data; }) .catch((error) => { console.log(error); contentEl.innerHTML = 'There was a problem loading the file!加载文件时出现问题！'; }); }; }; volantis.js(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/marked/marked.min.js\").then(()=>{ loadMarkdown(\"/md/md_example.md?t=\" + new Date().getTime()); }) })(); 我们可以看到它是直接显示的，效果跟官方文档的不一样。其实官方文档里是用一个folding套了一下，代码里没有明确写出来。 官方文档效果是这样的： 用folding套一下代码： &#123;% folding::用folding套一下.md显示 %&#125; &#123;% md /md/md_example.md %&#125; &#123;% endfolding %&#125; 效果如下。 用 folding 套一下的 md 显示 (()=>{ volantis.css(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/github-markdown-css/github-markdown.css\"); const contentEl = document.getElementById(\"md-6331c4ad-b98e-7346-8f72-92e507eb6cab\"); const loadMarkdown = (url) => { if (!window.fetch) { contentEl.innerHTML = 'Your browser outdated. Please use the latest version of Chrome or Firefox!您的浏览器版本过低，请使用最新版的 Chrome 或 Firefox 浏览器！'; } else { contentEl.innerHTML = 'Loading ... | 加载中。。。'; fetch(url, { method: \"GET\" }) .then((resp) => { return Promise.all([ resp.ok, resp.status, resp.text(), resp.headers, ]); }) .then(([ok, status, data, headers]) => { if (ok) { return { ok, status, data, headers, }; } else { throw new Error(JSON.stringify(json.error)); } }) .then((resp) => { let data = marked.parse(resp.data); contentEl.innerHTML = data; }) .catch((error) => { console.log(error); contentEl.innerHTML = 'There was a problem loading the file!加载文件时出现问题！'; }); }; }; volantis.js(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/marked/marked.min.js\").then(()=>{ loadMarkdown(\"/md/md_example.md?t=\" + new Date().getTime()); })})(); 当然folding的颜色是可选的。","categories":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://changakira.github.io/categories/Volantis%E4%B8%BB%E9%A2%98/"},{"name":"用法","slug":"Volantis主题/用法","permalink":"https://changakira.github.io/categories/Volantis%E4%B8%BB%E9%A2%98/%E7%94%A8%E6%B3%95/"}],"tags":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://changakira.github.io/tags/Volantis%E4%B8%BB%E9%A2%98/"}]},{"title":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task03","slug":"DataWhaleX魔搭-AI夏令营-四期AIGC方向-task03","date":"2024-08-17T09:28:40.000Z","updated":"2024-08-25T10:21:48.000Z","comments":true,"path":"2024/08/17/DataWhaleX魔搭-AI夏令营-四期AIGC方向-task03/","link":"","permalink":"https://changakira.github.io/2024/08/17/DataWhaleX%E9%AD%94%E6%90%AD-AI%E5%A4%8F%E4%BB%A4%E8%90%A5-%E5%9B%9B%E6%9C%9FAIGC%E6%96%B9%E5%90%91-task03/","excerpt":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task03 学习笔记","text":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task03 学习笔记 任务详情进阶上分-实战优化：我们今天的任务是了解微调的基本原理，对微调的各种参数有一个更加清楚的了解，来实现一个更好的效果，以及文生图的工作流平台工具ComfyUI，实现一个更加高度定制的文生图。 ComfyUI简介ComfyUI 是GUI的一种，是基于节点工作的用户界面，主要用于操作图像的生成技术，ComfyUI 的特别之处在于它采用了一种模块化的设计，把图像生成的过程分解成了许多小的步骤，每个步骤都是一个节点。这些节点可以连接起来形成一个工作流程，这样用户就可以根据需要定制自己的图像生成过程。 ComfyUI : The most powerful and modular stable diffusion GUI and backend. ComfyUI图片生成流程 找到的一些学习资料ComfyUI_GitHub地址https://github.com/comfyanonymous/ComfyUI 社区地址https://openart.ai/workflows/home 一个相关教程https://www.uisdc.com/stable-diffusion-comfyui 魔搭社区教程https://www.bilibili.com/video/BV1nT421k7Fa/?share_source=copy_web&vd_source=c806d41a4bffef5b492529ce1bae16d6 ComfyUI的优势 ComfyUI的优势 模块化和灵活性：ComfyUI 提供了一个模块化的系统，用户可以通过拖放不同的模块来构建复杂的工作流程。这种灵活性允许用户根据自己的需求自由组合和调整模型、输入、输出、和其他处理步骤。可视化界面：ComfyUI 提供了直观的图形界面，使得用户能够更清晰地理解和操作复杂的 AI 模型和数据流。这对没有编程背景的用户特别有帮助，使他们能够轻松构建和管理工作流程。多模型支持：ComfyUI 支持多个不同的生成模型，用户可以在同一平台上集成和切换使用不同的模型，从而实现更广泛的应用场景。调试和优化：通过其可视化界面，ComfyUI 使得调试生成过程变得更简单。用户可以轻松地追踪数据流，识别并解决问题，从而优化生成结果。开放和可扩展：ComfyUI 是一个开源项目，具有高度的可扩展性。开发者可以根据需要编写新的模块或插件，扩展系统功能，并根据项目需求进行定制。用户友好性：尽管其功能强大，但 ComfyUI 仍然保持了用户友好性，即使对于复杂任务，也能以相对简单的方式完成，使其成为生成式 AI 工作流程管理的有力工具。 使用魔搭社区提供的Notebook和免费的GPU算力体验来体验ComfyUINotebook依然在魔搭社区打开GPU环境Notebook。 打开Notebook 下载脚本代码文件新建一个terminal，下载安装ComfyUI的执行文件和task1中微调完成Lora文件。 git lfs install git clone https://www.modelscope.cn/datasets/maochase/kolors_test_comfyui.git mv kolors_test_comfyui/* ./ rm -rf kolors_test_comfyui/ mkdir -p /mnt/workspace/models/lightning_logs/version_0/checkpoints/ mv epoch=0-step=500.ckpt /mnt/workspace/models/lightning_logs/version_0/ checkpoints/ 进入ComfyUI的安装部署文件双击进入ComfyUI.ipynb文件。一键执行安装程序。（点击Restart按钮） 进入文件 运行 进入预览界面当执行到最后一个节点的内容输出了一个访问的链接的时候，复制链接到浏览器中访问。 不需要等待全部代码运行完毕，只需要等到链接出现即可打开它。 如果链接访问白屏，或者报错，就等一会再访问重试，程序可能没有正常启动完毕。 打开这样的链接 进入连接以后的主界面 下载工作流脚本本次Task用到两个工作流脚本，在下方的夸克网盘中。 工作流脚本https://pan.quark.cn/s/d5bbb9235c91 网盘链接内容 首先下载kolors_example.json文件。点击ComfyUI主界面上的”Load”按钮，选择刚刚下载的文件，输入你的正向提示词、反向提示词后，点击Queue Prompt按钮运行。 点击运行 以上的文件是不带Lora的工作流样例。接下来我们使用带Lora的工作流样例来生成图片。 这里的Lora是我们Task1微调训练出来的文件 地址是：&#x2F;mnt&#x2F;workspace&#x2F;models&#x2F;lightning_logs&#x2F;version_0&#x2F;checkpoints&#x2F;epoch&#x3D;0-step&#x3D;500.ckpt 如有有其他的Lora文件，可以在下面截图Lora文件地址区域更换成自己的地址 同样地，先Load，再写提示词，最后生成图片。 一些学习网站 名称 链接地址 在魔搭使用ComfyUI，玩转AIGC！ https://modelscope.cn/headlines/article/429 ComfyUI的官方地址 https://github.com/comfyanonymous/ComfyUI ComfyUI官方示范 https://comfyanonymous.github.io/ComfyUI_examples/ 别人的基础工作流示范 https://github.com/cubiq/ComfyUI_Workflows https://github.com/wyrde/wyrde-comfyui-workflows 工作流分享网站 https://comfyworkflows.com/ 推荐一个比较好的comfyui的github仓库网站 https://github.com/ZHO-ZHO-ZHO/ComfyUI-Workflows-ZHO?tab=readme-ov-file 魔搭官方教程： ComfyUI应用场景探索https://www.bilibili.com/video/BV1nT421k7Fa/?share_source=copy_web&vd_source=c806d41a4bffef5b492529ce1bae16d6 Lora微调Lora简介LoRA (Low-Rank Adaptation) 微调是一种用于在预训练模型上进行高效微调的技术。它可以通过高效且灵活的方式实现模型的个性化调整，使其能够适应特定的任务或领域，同时保持良好的泛化能力和较低的资源消耗。这对于推动大规模预训练模型的实际应用至关重要。 Lora微调的原理LoRA通过在预训练模型的关键层中添加低秩矩阵来实现。这些低秩矩阵通常被设计成具有较低维度的参数空间，这样它们就可以在不改变模型整体结构的情况下进行微调。在训练过程中，只有这些新增的低秩矩阵被更新，而原始模型的大部分权重保持不变。 通俗易懂理解全量微调和LoRA微调https://www.bilibili.com/video/BV1tthPeFEWb/?share_source=copy_web&vd_source=c806d41a4bffef5b492529ce1bae16d6 Lora微调的优势 快速适应新任务在特定领域有少量标注数据的情况下，也可以有效地对模型进行个性化调整，可以迅速适应新的领域或特定任务。 保持泛化能力LoRA通过微调模型的一部分，有助于保持模型在未见过的数据上的泛化能力，同时还能学习到特定任务的知识。 资源效率LoRA旨在通过仅微调模型的部分权重，而不是整个模型，从而减少所需的计算资源和存储空间。 详解 Task2中的的微调代码 import oscmd &#x3D; “””python DiffSynth-Studio&#x2F;examples&#x2F;train&#x2F;kolors&#x2F;train_kolors_lora.py \\ # 选择使用可图的Lora训练脚本DiffSynth-Studio&#x2F;examples&#x2F;train&#x2F;kolors&#x2F;train_kolors_lora.py –pretrained_unet_path models&#x2F;kolors&#x2F;Kolors&#x2F;unet&#x2F;diffusion_pytorch_model.safetensors \\ # 选择unet模型 –pretrained_text_encoder_path models&#x2F;kolors&#x2F;Kolors&#x2F;text_encoder \\ # 选择text_encoder –pretrained_fp16_vae_path models&#x2F;sdxl-vae-fp16-fix&#x2F;diffusion_pytorch_model.safetensors \\ # 选择vae模型 –lora_rank 16 \\ # lora_rank 16 表示在权衡模型表达能力和训练效率时，选择了使用 16 作为秩，适合在不显著降低模型性能的前提下，通过 LoRA 减少计算和内存的需求 –lora_alpha 4.0 \\ # 设置 LoRA 的 alpha 值，影响调整的强度 –dataset_path data&#x2F;lora_dataset_processed \\ # 指定数据集路径，用于训练模型 –output_path .&#x2F;models \\ # 指定输出路径，用于保存模型 –max_epochs 1 \\ # 设置最大训练轮数为 1 –center_crop \\ # 启用中心裁剪，这通常用于图像预处理 –use_gradient_checkpointing \\ # 启用梯度检查点技术，以节省内存 –precision “16-mixed” # 指定训练时的精度为混合 16 位精度（half precision），这可以加速训练并减少显存使用“””.strip()os.system(cmd) # 执行可图Lora训练 参数名称 参数值 说明 pretrained_unet_path models&#x2F;kolors&#x2F;Kolors&#x2F;unet&#x2F;diffusion_pytorch_model.safetensors 指定预训练UNet模型的路径 pretrained_text_encoder_path models&#x2F;kolors&#x2F;Kolors&#x2F;text_encoder 指定预训练文本编码器的路径 pretrained_fp16_vae_path models&#x2F;sdxl-vae-fp16-fix&#x2F;diffusion_pytorch_model.safetensors 指定预训练VAE模型的路径 lora_rank 16 设置LoRA的秩（rank），影响模型的复杂度和性能 lora_alpha 4 设置LoRA的alpha值，控制微调的强度 dataset_path data&#x2F;lora_dataset_processed 指定用于训练的数据集路径 output_path .&#x2F;models 指定训练完成后保存模型的路径 max_epochs 1 设置最大训练轮数为1 center_crop 启用中心裁剪，用于图像预处理 use_gradient_checkpointing 启用梯度检查点，节省显存 precision “16-mixed” 设置训练时的精度为混合16位精度（half precision） UNet、VAE和文本编码器的协作关系 UNet：负责根据输入的噪声和文本条件生成图像。在Stable Diffusion模型中，UNet接收由VAE编码器产生的噪声和文本编码器转换的文本向量作为输入，并预测去噪后的噪声，从而生成与文本描述相符的图像 VAE：生成模型，用于将输入数据映射到潜在空间，并从中采样以生成新图像。在Stable Diffusion中，VAE编码器首先生成带有噪声的潜在表示，这些表示随后与文本条件一起输入到UNet中 文本编码器：将文本输入转换为模型可以理解的向量表示。在Stable Diffusion模型中，文本编码器使用CLIP模型将文本提示转换为向量，这些向量与VAE生成的噪声一起输入到UNet中，指导图像的生成过程 高质量的数据集当我们进行图片生成相关的工作时，选择合适的数据集是非常重要的。 推荐自学python爬取网站数据。爬虫教程推荐慕课上的。 爬虫对于想要用AI生成某动漫或漫画画风的作品的同学十分具有针对性。如，如果想生成一个长得像《瑞克与莫蒂》作品中姥爷的科学家，就需要用爬虫去爬取网页上的数据了。这是使用其他数据收集方式无法做到的。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"AI","slug":"笔记/AI","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/AI/"}],"tags":[{"name":"Datawhale_AI夏令营","slug":"Datawhale-AI夏令营","permalink":"https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task02","slug":"DataWhaleX魔搭-AI夏令营-四期AIGC方向-task02","date":"2024-08-14T06:48:23.000Z","updated":"2024-08-25T10:21:44.000Z","comments":true,"path":"2024/08/14/DataWhaleX魔搭-AI夏令营-四期AIGC方向-task02/","link":"","permalink":"https://changakira.github.io/2024/08/14/DataWhaleX%E9%AD%94%E6%90%AD-AI%E5%A4%8F%E4%BB%A4%E8%90%A5-%E5%9B%9B%E6%9C%9FAIGC%E6%96%B9%E5%90%91-task02/","excerpt":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task02 学习笔记","text":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task02 学习笔记 接上文。 task01 学习笔记local/2024/08/09/DataWhale-AI夏令营-四期AIGC方向-task01/ 本次的任务是利用AI继续精读代码、利用AI完成一次比赛任务。 AI生图前沿在仔细阅读Task02所给的教程之后，我内心其实是有一些震惊的。在上一篇学习笔记中，我也大量地提到了AI生图目前的局限性——我提到了细节绘图能力不行、画不好手等等，但教程中的信息告诉我，这都是一年多前的老黄历了，目前业界已有相当多的解决方案。 给图片里的人手打上标记，像把手掌、拇指、食指啥的，都给清楚地标出来 是的，这个解决方案在我的上一篇笔记中也设想过……虽然麻烦，但是确实是有效的。 过去文生图主要以 SD 系列基础模型为主，仅支持英文的prompt，但可图是支持中文的文生图模型，文生图的prompt格式较为固定，魔搭社区还开源了专门的各种风格的可图优质咒语书，可以针对600+种不同风格，完善prompt，生成各种风格图片，可以在我们的学习当中使用。 这样一来，我们对于prompt的使用不局限于第三方工具了。同时，我经过测试发现，靠前的prompt似乎权重更大。 在我的上一篇文章中，还提到了AI生成图片时一般无法正确生成文字的问题。看过教程后我发现，这一点竟然也已经有了解决方案。 在某些设计的场景中，我们还希望AI能为我们将特定的文字生成在图片当中，比如下面这种海报——AI生成的海报但实际上，这种固定文字生成，往往难度较大，一是具体生成在哪些位置，往往需要人为设定，为了更方便地制作类似这样的海报还产生了PS等图片编辑工具，才能实现相应的效果，想要让AI稳定生成相似效果的图片可想而知难度之大。像我们Task1中介绍的 创意海报生成 工具，早已在代码中固定了相应的文字位置和对应的字体，才能进行相应的生成，且大概率是进行了两个步骤——一个步骤是AI生成背景，另一个步骤是通过代码将对应的文字显示到对应位置，然后渲染，合成图片，给到我们。 这真的让我比较吃惊了，虽然是通过曲线救国的方式，但确实解决了一大难题，使得AI生图能在更多更广的领域派上用场。 总之，我发现我对于AI生图的理解（上一篇笔记中聊到的）竟然相当过时了。我确实是在23年年底一段时间关注该领域相当多，但我没想到技术发展这么快，很多当时认为的难点都已经早早攻克了。我对AI生图，包括AI生成视频（我得也再多多关注一下生成视频的新发展）原本是不报有很大的希望的，认为短时间内它们还不能取代人类工作者，但现在我认为在一般的领域，它们已经完全可以胜任工作了。上面那张海报真的让我看傻了，直接给我的话，我绝对是分辨不出来的。这一顿吃多少画师啊。 魔搭社区在学习方面确实有着相当丰富的资料，这些工具也相当好用啊。 再放一下魔搭主页https://modelscope.cn/home 写笔记写到这里，我也去试了试魔搭的海报生成工具。效果其实还算中规中矩吧，并没有上图宣传的那么震撼，也可能是我的prompt描述不到位。但是这个工具集成了AI扩展文本描述和扩展提示词，有几种风格可以选择，还可以提升结果分辨率和做细节修复，总的来说呢还是很好用的，应付一般需求是足够的。 我是顺手拿这个工具做了两张海报。 海报1海报2海报1海报2 总之，可以直接使用，就算不太满意，上PS稍微调一调、多加点元素绝对没问题了。 向AI提问、精读代码杂谈本次Task主要任务是通过提问AI的方式来精读baseline代码，夏令营使用的是通义千问大语言模型。 我日常使用大语言模型还是比较频繁的，主要使用的是文心一言、讯飞星火和ChatGPT。ChatGPT我身边很多同学使用国内不知道哪儿找的，应该是调用的接口，也可以正常使用。我是魔法上网在官网用的，当初GPT推出以后没多久就搞了国外临时手机号注册的，不知道现在那方法还能不能用。这样算有利有弊吧，利的方面来说我可以肯定我这是ChatGPT，而我同学们使用的，我仔细观察总觉得是骗人的，看着还挺智障的，并且我没花钱（搞国外临时手机号花了一点点来着）（可能他们那种也没花钱，这要看搞这东西的人的良心的）。弊的方面来讲，我是永远不会使用新的GPT的，一直只用了3.5，是因为没精力搞，也是因为没钱，而我的同学们那种呢，反正宣传上是4.0。是不是真的4.0呢？可能吧~ 关于各厂家的大语言模型实际使用体验怎么样，我也不在这里多说。其实我认为，用着顺手的就是好的。平常不太重要的事情我就问讯飞星火了，我爸公司经常需要做PPT，我爸也不会，我也准备给他推荐讯飞星火了。涉及一些有风险的事情，我就去魔法上网问问ChatGPT，比如写思政课论文。 代码代码在Task02任务文档中给出。 以下代码为方便大家阅读理解，故放在了一起。但不能一键运行跑通，如何跑通代码，请直接参考task1中的内容。 代码内容比较长，并且在本篇文章中我们不需要人为的去一字一句看代码，因此我将其放入folding中以便展开和收起。 代码点这里 (()=>{ volantis.css(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/github-markdown-css/github-markdown.css\"); const contentEl = document.getElementById(\"md-1721e0b0-9772-2f21-82f4-989f5fdeac6d\"); const loadMarkdown = (url) => { if (!window.fetch) { contentEl.innerHTML = 'Your browser outdated. Please use the latest version of Chrome or Firefox!您的浏览器版本过低，请使用最新版的 Chrome 或 Firefox 浏览器！'; } else { contentEl.innerHTML = 'Loading ... | 加载中。。。'; fetch(url, { method: \"GET\" }) .then((resp) => { return Promise.all([ resp.ok, resp.status, resp.text(), resp.headers, ]); }) .then(([ok, status, data, headers]) => { if (ok) { return { ok, status, data, headers, }; } else { throw new Error(JSON.stringify(json.error)); } }) .then((resp) => { let data = marked.parse(resp.data); contentEl.innerHTML = data; }) .catch((error) => { console.log(error); contentEl.innerHTML = 'There was a problem loading the file!加载文件时出现问题！'; }); }; }; volantis.js(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/marked/marked.min.js\").then(()=>{ loadMarkdown(\"/md/datawhale_AI_code01.md?t=\" + new Date().getTime()); })})(); 首先我们来直观感知下这个文生图代码的框架结构： 代码框架结构 分析代码的主体架构依然还是老样子，我们需要一个prompt。 你是一个优秀的python开发工程师，现在我们需要你帮我们分析这个代码的主体框架，你需要把代码按照工作流分成几部分，用中文回答我的问题。&#123;此处替换前面的代码&#125; 打开（随便一个）大语言模型，输入上面的prompt。 等一下，我突然发现一件事：我现在使用的不是3.5，而是ChatGPT 4o mini。不过这不是什么重要的事情了。 来看看它的输出。因为有大标题小标题啥的，而且直接复制也是MarkDown形式，我使用外部.md文件的形式来呈现。 输出 (()=>{ volantis.css(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/github-markdown-css/github-markdown.css\"); const contentEl = document.getElementById(\"md-bfb963c0-5f13-da5d-8e93-a528ab285067\"); const loadMarkdown = (url) => { if (!window.fetch) { contentEl.innerHTML = 'Your browser outdated. Please use the latest version of Chrome or Firefox!您的浏览器版本过低，请使用最新版的 Chrome 或 Firefox 浏览器！'; } else { contentEl.innerHTML = 'Loading ... | 加载中。。。'; fetch(url, { method: \"GET\" }) .then((resp) => { return Promise.all([ resp.ok, resp.status, resp.text(), resp.headers, ]); }) .then(([ok, status, data, headers]) => { if (ok) { return { ok, status, data, headers, }; } else { throw new Error(JSON.stringify(json.error)); } }) .then((resp) => { let data = marked.parse(resp.data); contentEl.innerHTML = data; }) .catch((error) => { console.log(error); contentEl.innerHTML = 'There was a problem loading the file!加载文件时出现问题！'; }); }; }; volantis.js(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/marked/marked.min.js\").then(()=>{ loadMarkdown(\"/md/datawhale_AI_md01.md?t=\" + new Date().getTime()); })})(); 逐行解释代码prompt: 你是一个优秀的python开发工程师，现在我们需要你帮我们逐行分析这个代码，用中文回答我的问题。&#123;此处替换前面的代码&#125; 输出 (()=>{ volantis.css(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/github-markdown-css/github-markdown.css\"); const contentEl = document.getElementById(\"md-a906c276-2c4e-2054-8d8c-a2396b457345\"); const loadMarkdown = (url) => { if (!window.fetch) { contentEl.innerHTML = 'Your browser outdated. Please use the latest version of Chrome or Firefox!您的浏览器版本过低，请使用最新版的 Chrome 或 Firefox 浏览器！'; } else { contentEl.innerHTML = 'Loading ... | 加载中。。。'; fetch(url, { method: \"GET\" }) .then((resp) => { return Promise.all([ resp.ok, resp.status, resp.text(), resp.headers, ]); }) .then(([ok, status, data, headers]) => { if (ok) { return { ok, status, data, headers, }; } else { throw new Error(JSON.stringify(json.error)); } }) .then((resp) => { let data = marked.parse(resp.data); contentEl.innerHTML = data; }) .catch((error) => { console.log(error); contentEl.innerHTML = 'There was a problem loading the file!加载文件时出现问题！'; }); }; }; volantis.js(\"https://unpkg.com/volantis-static@0.0.1654736714924/libs/marked/marked.min.js\").then(()=>{ loadMarkdown(\"/md/datawhale_AI_md02.md?t=\" + new Date().getTime()); })})(); 实战演练这次我选择魔搭平台GPU免费Notebook实例。 让ChatGPT帮我选的故事主题、写的故事梗概、写的prompt，自己稍微调整了一下prompt。 故事主题：时间旅行的笑话-主角偶然发现了一个时间旅行的装置，但每次使用都会发生搞笑的意外情况。内容：故事内容详述 第1格 画面：一个不起眼的车库里，一名主角（可以是一个有点邋遢的科学家或发明家）在摆弄一个看起来非常复杂的机器。机器上贴满了“警告”和“试验中”的标签。文字：主角自言自语：“今天是大日子，我终于完成了我的时间旅行机！” 第2格 画面：主角激动地按下机器上的大按钮，机器开始发出闪烁的灯光和奇怪的声音。文字：主角兴奋地说：“让我们看看未来有什么有趣的事物吧！” 第3格 画面：机器在闪烁光芒中开始旋转，主角突然消失，周围的物品也跟着闪烁。文字：旁白：“经过一阵强烈的光芒，主角进入了未来。” 第4格 画面：主角出现在一个看起来很平常的现代办公室里，四周是高科技设备和未来风格的办公桌。文字：主角满怀期待地观察四周：“哇！这是未来吗？！” 第5格 画面：一位未来的办公室职员（穿着超前卫的工作服）看到主角，表现出困惑和惊讶。文字：职员说：“你是从哪里来的？今天不是穿越时空的日子。” 第6格 画面：主角挠头，尴尬地解释：“呃，我好像搞错了日期，我以为这是未来的日子。” 第7格 画面：职员微笑着，递给主角一个现代的日历和时光机的使用手册。文字：职员说：“时间旅行有时需要准确的计划。这里是正确的时间表和使用指南。” 第8格 画面：主角看着手中的日历和手册，一脸的无奈和搞笑的困惑。背景是未来办公室的职员们在窃笑。文字：主角叹气道：“看来我得先学会时间管理了！” promptprompt 第1格 正向反向未调整：一个车库里，一名邋遢的科学家正在操作一个复杂的时间旅行机器。机器上贴满了‘警告’和‘试验中’的标签，科学家神情兴奋，车库里充满了各种工具和零件。调整后：漫画风，美漫，一个车库里，一名邋遢的科学家正在头操作一个复杂的时间旅行机器，科学家只出现侧影，科学家胡子较长、头发是暗黄色的，体格壮实，大约四五十岁，佝偻着背，机器上贴满了标签，科学家神情兴奋，车库里充满了各种工具和零件。未调整：不要画一个干净整洁的实验室或现代化的研究环境，也不要画出没有标签和警告的机器。调整后：二次元，不要出现科学家的正脸，不要出现歪曲的手指、膨大的关节，不要画一个干净整洁的实验室或现代化的研究环境，也不要画出没有标签和警告的机器。 第2格 正向反向未调整：科学家激动地按下时间旅行机器上的大按钮，机器开始发出闪烁的灯光和奇怪的声音。画面中可以看到按钮被按下，机器发出光芒。调整后：漫画风，美漫，一个车库里，一名邋遢的科学家正在头操作一个复杂的时间旅行机器，科学家只出现侧影，科学家胡子较长、头发是暗黄色的，体格壮实，大约四五十岁，佝偻着背，机器上贴满了标签，科学家激动地按下时间旅行机器上的大按钮，机器发出光芒。未调整：不要画出没有任何动作的机器，或是科学家没有进行任何操作的画面。调整后：二次元，不要出现科学家的正脸，不要出现歪曲的手指、膨大的关节，不要画一个干净整洁的实验室或现代化的研究环境，也不要画出没有标签和警告的机器，不要画出没有任何动作的机器，或是科学家没有进行任何操作的画面。 第3格 正向反向未调整：时间旅行机器在闪烁光芒中旋转，科学家和周围的物品一起被包裹在光芒中，画面中显示出物品和科学家被传送的效果。调整后：漫画风，美漫，一个车库里，一名邋遢的科学家正在头操作一个复杂的时间旅行机器，科学家只出现侧影，科学家胡子较长、头发是暗黄色的，体格比一般人略微壮实一些，大约四五十岁，佝偻着背，机器上贴满了标签，时间旅行机器在剧烈的闪烁白色光芒中旋转，科学家和周围的物品一起被包裹在白色光芒中，画面中显示出物品和科学家被传送的效果。未调整：不要画出没有时间旅行效果的画面，也不要画出科学家静止不动的情况。调整后：二次元，不要出现科学家的正脸，不要画一个肥胖的科学家，不要出现歪曲的手指、膨大的关节，不要画一个干净整洁的实验室或现代化的研究环境，也不要画出没有标签和警告的机器，不要画出没有时间旅行效果的画面，也不要画出科学家静止不动的情况。 第4格 正向反向未调整：科学家出现在一个现代办公室，办公室里有高科技设备和未来风格的办公桌。科学家看起来惊讶和好奇。调整后：漫画风，美漫，画风写实、粗犷，一名邋遢的科学家出现在一个现代办公室，科学家胡子较长、头发是暗黄色的，体格壮实，大约四五十岁，佝偻着背，办公室里有高科技设备和未来风格的办公桌。科学家看起来惊讶和好奇。未调整：不要画传统或普通的办公室环境，也不要画出科学家没有表现出惊讶或好奇的情况。调整后：二次元，不要出现歪曲的手指、膨大的关节，不要画传统或普通的办公室环境，也不要画出科学家没有表现出惊讶或好奇的情况。 第5格 正向反向未调整：一位未来风格的办公室职员穿着超前卫的工作服，看到科学家后表现出困惑和惊讶，背景是现代化的办公室。调整后：漫画风，美漫，两个人面对面相隔较远，画出全身。一名邋遢的科学家，科学家胡子较长、头发是暗黄色的，体格壮实，大约四五十岁，佝偻着背，表情十分惊讶；一位未来风格的男性办公室职员，穿着超前卫的工作服，看到科学家后表现出一丝困惑和惊讶，背景是现代化的办公室。未调整：不要画穿着普通衣服的职员，也不要画出职员没有表现出困惑和惊讶的情景。调整后：二次元，不要出现歪曲的手指、膨大的关节，不要画传统或普通的办公室环境，也不要画出科学家没有表现出惊讶或好奇的情况。不要画穿着普通衣服的职员，也不要画出职员没有表现出困惑和惊讶的情景。 第6格 正向反向未调整：科学家挠头，尴尬地解释自己的误会。画面中可以看到科学家手舞足蹈，职员则听着他的解释。调整后：漫画风，美漫，两个主要人物。一名邋遢的科学家科学家挠头，科学家胡子较长、头发是暗黄色的，体格壮实，大约四五十岁，佝偻着背，画面中可以看到科学家手舞足蹈；另一名职员冷静地听着他的解释。背景是白色的未来风办公室。未调整：不要画出科学家没有任何动作或表情的画面，也不要画出职员没有听科学家解释的情况。调整后：二次元，不要画出科学家没有任何动作或表情的画面，也不要画出职员没有听科学家解释的情况。 第7格 正向反向未调整：职员微笑着，递给科学家一个现代的日历和时间旅行机的使用手册。科学家看起来有些困惑但接受了这些物品。调整后：漫画风，美漫，两个人面对面相隔较远，画出全身。一名职员微笑着，递给科学家一个现代的日历和一本使用手册；一名科学家，看起来有些困惑，接受了职员给的这些物品。科学家胡子较长、头发是暗黄色的，体格壮实，大约四五十岁，佝偻着背未调整：不要画出职员没有递送物品或科学家没有接受物品的画面。调整后：二次元，不要画出职员没有递送物品或科学家没有接受物品的画面。 第8格 正向反向未调整：科学家看着手中的日历和手册，表现出无奈和搞笑的困惑，背景中职员们在窃笑。画面充满幽默感。调整后：漫画风，美漫，科学家看着手中的日历和手册，表现出无奈和搞笑的困惑，背景中职员们在窃笑。画面充满幽默感。未调整：不要画出科学家没有任何情绪表现的画面，也不要画出背景中职员们没有表现出窃笑的情况。调整后：二次元，不要画出科学家没有任何情绪表现的画面，也不要画出背景中职员们没有表现出窃笑的情况。 感觉似乎ChatGPT并不是十分理解什么是文生图prompt。而且为了上下图中人物长相的一致性，我们还需要增添许多细节描述。 结果展示科学家自言自语：“今天是大日子，我终于完成了我的时间旅行机！”科学家兴奋地说：“让我们看看未来有什么有趣的事物吧！”经过一阵强烈的光芒，科学家进入了未来。科学家满怀期待地观察四周：“哇！这是未来吗？！”一位未来的办公室职员（穿着超前卫的工作服）看到科学家，表现出困惑和惊讶，说：“你是从哪里来的？今天不是穿越时空的日子。” 额，后面的搞丢了。我会抽时间重新跑一遍的。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"AI","slug":"笔记/AI","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/AI/"}],"tags":[{"name":"Datawhale_AI夏令营","slug":"Datawhale-AI夏令营","permalink":"https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task01","slug":"DataWhale-AI夏令营-四期AIGC方向-task01","date":"2024-08-09T01:18:31.000Z","updated":"2024-08-25T10:21:38.000Z","comments":true,"path":"2024/08/09/DataWhale-AI夏令营-四期AIGC方向-task01/","link":"","permalink":"https://changakira.github.io/2024/08/09/DataWhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5-%E5%9B%9B%E6%9C%9FAIGC%E6%96%B9%E5%90%91-task01/","excerpt":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task01 学习笔记","text":"DataWhaleX魔搭_AI夏令营_四期AIGC方向_task01 学习笔记 AI生图学习主题介绍从零入门AI生图原理&amp;实践 是 Datawhale 2024 年 AI 夏令营第四期的学习活动（“AIGC”方向），基于魔搭社区“可图Kolors-LoRA风格故事挑战赛”开展的实践学习——适合想 入门并实践 AIGC文生图、工作流搭建、LoRA微调 的学习者参与学习内容提要：从文生图实现方案逐渐进阶，教程偏重图像工作流、微调、图像优化等思路，最后会简单介绍AIGC应用方向、数字人技术（选学） 比赛介绍本次学习任务基于可图Kolors-LoRA风格故事挑战赛，该比赛同样由阿里云天池平台联合魔搭社区举办。进行学习任务，需要报名参加该比赛来更好地检验自己的学习成果。 赛题内容 参赛者需在可图Kolors 模型的基础上训练LoRA 模型，生成无限风格，如水墨画风格、水彩风格、赛博朋克风格、日漫风格…… 基于LoRA模型生成 8 张图片组成连贯故事，故事内容可自定义；基于8图故事，评估 LoRA 风格的美感度及连贯性 样例：偶像少女养成日记 大赛所给样例 对样例的想法与解说由八图故事表现形式，联想到早期四格漫画八图故事，顾名思义，由八张图片组成连贯的故事。其实我最初看到这个要求的时候，脑中立马闪过小时候很流行的“四格漫画”。 啥是四格漫画？ 四格漫画，是以四个画面分格来完成一个小故事或一个创意点子的表现形式。四格漫画短短几格就涵盖了一个事件的发生、情节转折及幽默的结局。让人看完不觉莞尔，会心一笑或捧腹大笑。四格漫画着重点子创意，画面不需很复杂，角色也不需要太多，对白精简，让人容易轻松阅读。四格漫画是一种古老的艺术表现形式，四格漫画在表现上的特点主要强调叙事。早期的漫画除了传统的单幅外，就是四格讽刺漫画：开头，发展，高潮，结尾，所以是四格。六格和八格是后来才出现的，情节展开会比较多。其实四格漫画对格数已经没有限制。 当时的四格漫画大多画风简单而突出重点，富有表现力，故事情节简单而富有转折、诙谐幽默冷幽默。 早期四格漫画示例 早期四格漫画示例赛尔号打钱！ 早期四格漫画形式的借鉴意义风格上故事上而现在，我们用AI生成故事，也就不需要拘泥于漫画的表现风格了，赛题要求中也写道： 如水墨画风格、水彩风格、赛博朋克风格、日漫风格…… 而我们要讲的故事所适合的风格，我想这是我们需要思考的。 如在交流群中，有一位同学想讲“指环王里一开头弗罗多的故事”，但生成的图片风格却是比较写实的，头发画的比较细腻，光线也打的较为柔和，整体全是人物近景，有背景的图片中，背景又虚化比较严重……导致该同学表示“生成的好像和我想的一点儿关系也没有，除了衣服配上了”，这就说明该同学存在的问题是描述细节多，而对整体风格要求可能较少。风格上，我们不必拘泥于早期四格漫画形式，但在如何讲好一个故事上，我想四格漫画有很重要的参考意义。 在早期四格漫画中，故事大多具有转折或幽默特点，四格中一般即起、承、转、结，前三格铺陈蓄势，第四格让人意想不到； 使用的对白尽量精简，不用对白只靠表情跟动作是最好也是最难的演出；但是，由于AI绘图很难绘制出正确的文字，所以这一点我们可以不予考虑（记得要在反向提示词中加入”text”以防万一），取而代之的是，我们可以在故事的描述文字上（示例中每张图片上方的文字）多做注意，做到文字简明、概括。 动作、表情、对白、情节安排必须符合各个角色设定的性格特征与一贯性。如果在仅仅八格的内容中就出现了角色前后形象大不一致（不是由于剧情发展而引起的正常转变）、甚至直接人设崩塌，这是绝对不能接受的。 样例是如何生成的？你可能使用过AI生成图片，那么对于我们要做的事情应该很清楚：给AI提示词。 什么是 prompt ？在使用大语言模型时，使用 prompt 往往可以获得更好、更精确的结果。prompt直译为“提示语”。现在已经有专门研究大语言模型prompt的工作（prompt engineer）。AI 科普：什么是Prompt？如何写Prompthttps://base.feishu.cn/academy/ai/beginner-prompt关于提示工程（Prompt Engineering）https://www.promptingguide.ai/zh 我们也可以简单地理解为在这次任务中，我们对于AI的要求。试想：我们在请人类作画时，尚且需要提出要求呢。 我们可以打开baseline.ipynb查看样例所给的prompt。 由于现在还没有按照教程打开魔搭社区notebook，且我们只是要先下载baseline.ipynb文件看一眼，所以我在本地新建一个临时文件夹进行了clone： git lfs install git clone https://www.modelscope.cn/datasets/maochase/kolors.git 本地clone 打开文件夹，找到baseline.ipynb文件并用notepad–等类似软件打开，在稍后面一点的位置，找到了八组prompt。去掉格式化字符”\\n”等后内容如下： 8组prompt内容 图片1 promptnegative_prompt二次元，一个紫色短发小女孩，在家中沙发上坐着，双手托着腮，很无聊，全身，粉色连衣裙丑陋、变形、嘈杂、模糊、低对比度 图片2 promptnegative_prompt二次元，日系动漫，演唱会的观众席，人山人海，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，舞台上衣着华丽的歌星们在唱歌丑陋、变形、嘈杂、模糊、低对比度 图片3 promptnegative_prompt二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙坐在演唱会的观众席，露出憧憬的神情丑陋、变形、嘈杂、模糊、低对比度，色情擦边 图片4 promptnegative_prompt二次元，一个紫色短发小女孩穿着粉色吊带漏肩连衣裙，对着流星许愿，闭着眼睛，十指交叉，侧面丑陋、变形、嘈杂、模糊、低对比度，扭曲的手指，多余的手指 图片5 promptnegative_prompt二次元，一个紫色中等长度头发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌丑陋、变形、嘈杂、模糊、低对比度 图片6 promptnegative_prompt二次元，一个紫色长发小女孩穿着粉色吊带漏肩连衣裙，在练习室练习唱歌，手持话筒丑陋、变形、嘈杂、模糊、低对比度 图片7 promptnegative_prompt二次元，紫色长发少女，穿着黑色连衣裙，试衣间，心情忐忑丑陋、变形、嘈杂、模糊、低对比度 图片8 promptnegative_prompt二次元，紫色长发少女，穿着黑色礼服，连衣裙，在台上唱歌丑陋、变形、嘈杂、模糊、低对比度 我们再将大赛所给样例拿出来进行对照： 样例：偶像少女养成日记 大赛所给样例 这样一来，你是否理解了prompt、negative_prompt的作用呢？其中，negative_prompt为排除项，即negative_prompt中写上“多余的手指”，则AI生成的图片中就不会有多余的手指。 我们在写自己的prompt时，可以借助于一些prompt工具，如我使用的 AI绘画提示词生成器 ，预览如下： 样例存在哪些问题？大赛所给样例只是最基本的完成情况，我们可以挑一挑其中存在的问题，在我们自己作画时避免。 首先是故事讲述的问题，这是一个极其平淡的故事。 其次，整个画面风格有些奇怪。这应该也是由于prompt对风格要求较少导致的。 注意到图片4中negative_prompt多次出现手指首先我们看到：图片4的prompt中有 十指交叉 的要求。而即使图片4negative_prompt中排除了扭曲的手指，多余的手指，AI绘制出来的手指也稍显奇怪。 为什么AI总是画不好人的手呢？这是一个非常经典的问题，了解这个问题可以让我们对AI绘画的原理理解更深。 其实原因很简单： 人手动作极多。人的手看似结构简单，只有五根指头，仿佛画好五根指头就可以了。然而，对于AI来说，人手做出的每个动作都是完全不同的。举个例子：我们先虚握拳头，让手围成一个圈，这是第一个动作；然后紧握拳头，这是第二个动作。对于人类来说，我们知道这两个动作是类似的，可能只是幅度的不同。然而对于AI来说，给它两张这样的动作图片，它将感到十分困惑：为什么手有时候是这样的，有时候是那样的？而这只是一个浅显的例子，在这个例子中，我们尚且可以告诉AI：第一个动作叫虚握，第二个动作叫实握，从而让AI理解。但是人手的动作实在太多了，我们既不可能给每个有细微差别的动作都起名，也不大可能准备如此海量的训练数据喂给AI。 人手空间变化多。人的手十分灵巧，关节很多、自由度很大，而我们训练生成图片的AI，使用的自然也是图片，这就导致一个问题：在照片中，当人手做出某个动作时，就可能有部分手指看不到，这就导致AI不清楚人类到底应该有几根手指。另一个严重的问题是使AI分不清楚各个手指的粗细关系。比如，同样是竖两根手指，比个正常的耶（✌），AI发现这两根手指差不多长。接着我们竖起来食指和小拇指，小拇指比食指短很多，AI就要变得困惑了。 那么，如果我们一直只喂给AI手完全打开的、正面的图片，AI是不是就不会画错了呢？是的，但AI也就只能画出手完全打开的、正面的图片了。 人手的细节非常复杂，包括指甲、指纹、皮肤褶皱等，这些需要很高的算力才能画出。 同样的问题有时也会出现在AI试图绘画更小的特征时，比如耳朵，看起来像没有复杂软骨结构的肉质漩涡；或者牙齿，不正确地放在嘴里；或者瞳孔，变成了小山羊的斑点。AI可以掌握视觉模式，但无法掌握潜在的生物逻辑。 暂时地，AI还有很多东西都画不好。 文生图的历史（点击展开介绍） 早期探索（20世纪60年代-20世纪90年代） 文生图的概念最早出现于计算机视觉和图像处理的早期研究中。早期的图像生成技术主要依赖于规则和模板匹配，通过预定义的规则将文本转换为简单的图形。然而，由于计算能力和算法的限制，这一阶段的技术能力非常有限，生成的图像质量较低，应用场景也非常有限。 基于统计模型的方法（2000年代） 进入2000年代，随着统计模型和机器学习技术的发展，文生图技术开始得到更多关注。研究者们开始利用概率图模型和统计语言模型来生成图像。尽管这一阶段的技术在生成图像的多样性和质量上有了一定提升，但由于模型的复杂性和计算资源的限制，生成的图像仍然较为粗糙，不够逼真。 深度学习的崛起（2010年代） 2010年代是文生图技术发展的一个重要转折点。随着深度学习，尤其是卷积神经网络（CNN）和生成对抗网络（GAN）的发展，文生图技术取得了突破性进展。2014年，Goodfellow等人提出的GAN模型通过生成器和判别器的对抗训练，极大地提升了图像生成的质量。随后，各类变种GAN模型被提出，如DCGAN、Pix2Pix等，使得文生图技术在生成逼真图像方面达到了前所未有的高度。 大规模预训练模型（2020年代） 进入2020年代，大规模预训练模型如OpenAI的CLIP、DALL-E以及Stable Diffusion等的出现，标志着文生图技术进入了一个新的时代。CLIP通过大规模的文本和图像配对数据训练，能够理解和生成高度一致的文本和图像；DALL-E和Stable Diffusion进一步提升了生成图像的创意和细节表现能力，使得通过简单的文本描述生成高质量、复杂图像成为可能。这些技术的应用范围从艺术创作、广告设计到辅助医疗诊断，展现了广泛的商业价值和社会影响力。 Task1 流程回顾该部分内容详见 Task1学习手册 ，以下仅作简要回顾。 开通阿里云PAI-DSW试用阿里云免费试用云产品https://free.aliyun.com/?productCode=learn 魔搭社区授权https://www.modelscope.cn/my/mynotebook/authorization 报名赛事可图Kolors-LoRA风格故事挑战赛https://tianchi.aliyun.com/competition/entrance/532254 在魔搭社区创建实例魔搭社区-个人云账号授权实例https://www.modelscope.cn/my/mynotebook/authorization 如果 在魔搭无法授权 或 点击【打开】无法打开，可到阿里云控制台创建 &amp; 打开实例 如果之前试用的额度已经过期，可使用魔搭的免费Notebook实例 跑代码！下载baseline文件git lfs install git clone https://www.modelscope.cn/datasets/maochase/kolors.git 下载baseline文件 安装环境，然后重启kernel打开baseline文件，运行第一块儿代码。 运行第一块儿代码，安装环境 安装 Data-Juicer 和 DiffSynth-StudioData-Juicer：数据处理和转换工具，旨在简化数据的提取、转换和加载过程DiffSynth-Studio：高效微调训练大模型工具 完成 然后重启kernel。最上方点击这个按钮。 这个按钮 认准鼠标悬停时显示 restart 的那个。 调整prompt但不要运行这部分代码块儿。 依次顺序运行剩余的代码块需要一个一个去点代码框左上角执行按钮。 为节省时间，以上两步可同时进行，即在运行前面的代码块儿同时修改prompt。 但要注意代码块儿执行需要按顺序执行。 代码块按照功能主要分成这几类： 使用Data-Juicer处理数据，整理训练数据文件 使用DiffSynth-Studio在基础模型上，使用前面整理好的数据文件进行训练微调 加载训练微调后的模型 使用微调后的模型，生成用户指定的prompt提示词的图片 上传结果魔搭社区-模型库https://www.modelscope.cn/models/create 关闭实例代码一个小提示images = [np.array(Image.open(&quot;&#123;i&#125;.jpg&quot;)) for i in range(1, 9)], image = np.concatenate([ np.concatenate(images[0:2], axis=1), np.concatenate(images[2:4], axis=1), np.concatenate(images[4:6], axis=1), np.concatenate(images[6:8], axis=1), ], axis=0), image = Image.fromarray(image).resize((1024, 2048)), image 这是最后一段代码，运行完这段代码后，将在主界面显示我们八张图片组成的故事。这是因为在python中，输入变量的名称回车，会返回变量的值。 输入变量名称i，返回i的值 而这段代码中，变量名称就是image。我们还可以在下面补上一句： image.save(&quot;all.jpg&quot;) 这样它还会将我们的八图组成的图片保存为”all.jpg”。 部分代码解读!pip install simple-aesthetics-predictor !pip install -v -e data-juicer !pip uninstall pytorch-lightning -y !pip install peft lightning pandas torchvision !pip install -e DiffSynth-Studio 我们上文已经提到，这部分是安装环境。 #下载数据集 from modelscope.msdatasets import MsDataset ds = MsDataset.load( &#39;AI-ModelScope/lowres_anime&#39;, subset_name=&#39;default&#39;, split=&#39;train&#39;, cache_dir=&quot;/mnt/workspace/kolors/data&quot; ) import json, os from data_juicer.utils.mm_utils import SpecialTokens from tqdm import tqdm os.makedirs(&quot;./data/lora_dataset/train&quot;, exist_ok=True) os.makedirs(&quot;./data/data-juicer/input&quot;, exist_ok=True) with open(&quot;./data/data-juicer/input/metadata.jsonl&quot;, &quot;w&quot;) as f: for data_id, data in enumerate(tqdm(ds)): image = data[&quot;image&quot;].convert(&quot;RGB&quot;) image.save(f&quot;/mnt/workspace/kolors/data/lora_dataset/train/&#123;data_id&#125;.jpg&quot;) metadata = &#123;&quot;text&quot;: &quot;二次元&quot;, &quot;image&quot;: [f&quot;/mnt/workspace/kolors/data/lora_dataset/train/&#123;data_id&#125;.jpg&quot;]&#125; f.write(json.dumps(metadata)) f.write(&quot;\\n&quot;) 下载数据集。 data_juicer_config = &quot;&quot;&quot; # global parameters project_name: &#39;data-process&#39; dataset_path: &#39;./data/data-juicer/input/metadata.jsonl&#39; # path to your dataset directory or file np: 4 # number of subprocess to process your dataset text_keys: &#39;text&#39; image_key: &#39;image&#39; image_special_token: &#39;&lt;__dj__image&gt;&#39; export_path: &#39;./data/data-juicer/output/result.jsonl&#39; # process schedule # a list of several process operators with their arguments process: - image_shape_filter: min_width: 1024 min_height: 1024 any_or_all: any - image_aspect_ratio_filter: min_ratio: 0.5 max_ratio: 2.0 any_or_all: any &quot;&quot;&quot; with open(&quot;data/data-juicer/data_juicer_config.yaml&quot;, &quot;w&quot;) as file: file.write(data_juicer_config.strip()) !dj-process --config data/data-juicer/data_juicer_config.yaml import pandas as pd import os, json from PIL import Image from tqdm import tqdm texts, file_names = [], [] os.makedirs(&quot;./data/lora_dataset_processed/train&quot;, exist_ok=True) with open(&quot;./data/data-juicer/output/result.jsonl&quot;, &quot;r&quot;) as file: for data_id, data in enumerate(tqdm(file.readlines())): data = json.loads(data) text = data[&quot;text&quot;] texts.append(text) image = Image.open(data[&quot;image&quot;][0]) image_path = f&quot;./data/lora_dataset_processed/train/&#123;data_id&#125;.jpg&quot; image.save(image_path) file_names.append(f&quot;&#123;data_id&#125;.jpg&quot;) data_frame = pd.DataFrame() data_frame[&quot;file_name&quot;] = file_names data_frame[&quot;text&quot;] = texts data_frame.to_csv(&quot;./data/lora_dataset_processed/train/metadata.csv&quot;, index=False, encoding=&quot;utf-8-sig&quot;) data_frame 处理数据集，保存数据处理结果。 # 下载模型 from diffsynth import download_models download_models([&quot;Kolors&quot;, &quot;SDXL-vae-fp16-fix&quot;]) #模型训练 import os cmd = &quot;&quot;&quot; python DiffSynth-Studio/examples/train/kolors/train_kolors_lora.py \\ --pretrained_unet_path models/kolors/Kolors/unet/diffusion_pytorch_model.safetensors \\ --pretrained_text_encoder_path models/kolors/Kolors/text_encoder \\ --pretrained_fp16_vae_path models/sdxl-vae-fp16-fix/diffusion_pytorch_model.safetensors \\ --lora_rank 16 \\ --lora_alpha 4.0 \\ --dataset_path data/lora_dataset_processed \\ --output_path ./models \\ --max_epochs 1 \\ --center_crop \\ --use_gradient_checkpointing \\ --precision &quot;16-mixed&quot; &quot;&quot;&quot;.strip() os.system(cmd) lora微调。 Stable Diffusion中的Lora（LoRA）模型是一种轻量级的微调方法，它代表了“Low-Rank Adaptation”，即低秩适应。Lora不是指单一的具体模型，而是指一类通过特定微调技术应用于基础模型的扩展应用。在Stable Diffusion这一文本到图像合成模型的框架下，Lora被用来对预训练好的大模型进行针对性优化，以实现对特定主题、风格或任务的精细化控制。 from diffsynth import ModelManager, SDXLImagePipeline from peft import LoraConfig, inject_adapter_in_model import torch def load_lora(model, lora_rank, lora_alpha, lora_path): lora_config = LoraConfig( r=lora_rank, lora_alpha=lora_alpha, init_lora_weights=&quot;gaussian&quot;, target_modules=[&quot;to_q&quot;, &quot;to_k&quot;, &quot;to_v&quot;, &quot;to_out&quot;], ) model = inject_adapter_in_model(lora_config, model) state_dict = torch.load(lora_path, map_location=&quot;cpu&quot;) model.load_state_dict(state_dict, strict=False) return model # Load models model_manager = ModelManager(torch_dtype=torch.float16, device=&quot;cuda&quot;, file_path_list=[ &quot;models/kolors/Kolors/text_encoder&quot;, &quot;models/kolors/Kolors/unet/diffusion_pytorch_model.safetensors&quot;, &quot;models/kolors/Kolors/vae/diffusion_pytorch_model.safetensors&quot; ]) pipe = SDXLImagePipeline.from_model_manager(model_manager) # Load LoRA pipe.unet = load_lora( pipe.unet, lora_rank=16, # This parameter should be consistent with that in your training script. lora_alpha=2.0, # lora_alpha can control the weight of LoRA. lora_path=&quot;models/lightning_logs/version_0/checkpoints/epoch=0-step=500.ckpt&quot; ) 加载微调好的模型。 torch.manual_seed(0) image = pipe( prompt=&quot;二次元，一个紫色短发小女孩，在家中沙发上坐着，双手托着腮，很无聊，全身，粉色连衣裙&quot;, negative_prompt=&quot;丑陋、变形、嘈杂、模糊、低对比度&quot;, cfg_scale=4, num_inference_steps=50, height=1024, width=1024, ) image.save(&quot;1.jpg&quot;) 图片生成（改变种子值重复8次）。 最后是我们上一节中提到的将8张图片合为一张。 思考这个图片的风格能不能修改，能不能微调出来一个其他风格类型的图片？ 点击展开 尽管比赛要求要不同的风格、我们也在注意不同风格的尝试，但经过不断的调整和观察对比大家的结果，我认为如果不对代码部分进行其它调整的话，这个图片的风格是不会改变的，即一直倾向于二次元风格。我认为这可能与训练数据有关。而在上文代码解读中， 下载数据集 部分里也写明了我们训练的数据只有“二次元”。 结果展示 自己写了prompt 组成故事 无明显bug 效果满意 我的第一张图片是测试上文中提到的prompt生产工具，按照自己喜好选了几个prompt生成的。接下来7张图都是调整prompt试图生成一张《孤独摇滚》中的波奇。没有进行连贯故事的尝试，因为我还没想好故事。 all.jpg 画风崩坏还是挺严重的。 从效果上看，第6张与波奇最为接近，但同时第6张也是作画bug最大的一张：手臂不协调、手指数量不正确、吉他那儿有不明意义的大幅色块儿。 关于发卡：从一开始我就没指望AI能正确理解波奇的发卡长什么样子，但是画成这样还是让我很惊喜了。整体的氛围也很像《孤独摇滚》。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"AI","slug":"笔记/AI","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/AI/"}],"tags":[{"name":"Datawhale_AI夏令营","slug":"Datawhale-AI夏令营","permalink":"https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"hexo网站访问速度优化","slug":"hexo网站访问速度优化","date":"2024-08-07T11:45:36.000Z","updated":"2024-08-25T10:22:06.000Z","comments":true,"path":"2024/08/07/hexo网站访问速度优化/","link":"","permalink":"https://changakira.github.io/2024/08/07/hexo%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/","excerpt":"哈哈，真是越来越慢了呢……（😊 本文关于hexo-offline-popup、gulp4。效果……有确实是有的……","text":"哈哈，真是越来越慢了呢……（😊 本文关于hexo-offline-popup、gulp4。效果……有确实是有的…… 这类教程文章真的很多，我不多介绍，可以参考下面的文章（精挑细选！） hexo-offline-popuphttps://blog.csdn.net/weixin_58068682/article/details/116613947 gulp4、hexo-neathttps://blog.csdn.net/qq_43625917/article/details/104136304 第一篇文章关于hexo-offline-popup，完全照做即可。 第二篇文章关于gulp4和hexo-neat，这俩是同类型的东西，我不确定能否同时使用，我只使用了gulp4。 对这篇文章做一些小的补丁：1文中 0x02 - 2.安装gulp插件 中，注释部分可以先不用管。 23.部署执行 中 package.json 文件指博客根目录下的。 3解决方法2： 继续方法1 安装 babel 模块 这部分中，要与我们上文跳过的 0x02 - 2.安装gulp插件 中的注释部分结合着看，这里面提到的都要装，但： #问题：如果安装gulp-imagemin错误请执行以下语句 #sudo npm i gulp-imagemin --unsafe-perms 除外。遇到装不上gulp-imagemin的问题才要装。 然后是关于作者的 gulpfile.js文件 一些说明。4gulp.task(&#39;minify-js&#39;, function () &#123; //纠错前：return gulp.src(&#39;./public/**/*.js&#39;) return gulp.src([&#39;./public/**/*.js&#39;, &#39;!./public/lib/blog-encrypt.js&#39;]) .pipe(uglify()) .pipe(gulp.dest(&#39;./public&#39;)) &#125;); 这部分建议先写纠错前的那句，因为我们自己的博客不一定会遇到这个文件有问题。抛出结果以后，它说哪个js文件压缩不了，我们再对应的写上 &#39;!文件&#39; 。 5// 压缩图片 //gulp.task(&#39;minify-images&#39;, function() &#123; // return gulp.src(&#39;./public/images/**/*.*&#39;) // .pipe(imagemin( // [imagemin.gifsicle(&#123;&#39;optimizationLevel&#39;: 3&#125;), // imagemin.jpegtran(&#123;&#39;progressive&#39;: true&#125;), // imagemin.optipng(&#123;&#39;optimizationLevel&#39;: 7&#125;), // imagemin.svgo()], // &#123;&#39;verbose&#39;: true&#125;)) // .pipe(gulp.dest(&#39;./public/images&#39;)) //&#125;); 这部分作者由于特殊原因没写，我们可以写上看看会不会出现问题。上述的这些代码除了路径可以改一下其他外不需要改变，然后在开头有类似语句的地方写上 var imagemin = require(&#39;gulp-imagemin&#39;); 最后gulp.task的地方补上’minify-images’。 如果有 require() of ES modules is not supported. 的错误，请参照 require() of ES modules is not supported.https://github.com/imagemin/imagemin/issues/380 ，将gulp-imagemin退回至7.1.0版本。这里面关于版本号问题问答还挺有意思的（冷幽默）。 可能能解决……如果解决不了的话，建议跟这位作者一样，注释掉吧……","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/categories/Hexo/"},{"name":"优化","slug":"Hexo/优化","permalink":"https://changakira.github.io/categories/Hexo/%E4%BC%98%E5%8C%96/"},{"name":"速度优化","slug":"Hexo/优化/速度优化","permalink":"https://changakira.github.io/categories/Hexo/%E4%BC%98%E5%8C%96/%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/tags/Hexo/"}]},{"title":"volantis_navbar_logo_title的彩色方式","slug":"volantis-navbar-logo-title的彩色方式","date":"2024-08-07T11:09:10.000Z","updated":"2024-08-25T10:21:30.000Z","comments":true,"path":"2024/08/07/volantis-navbar-logo-title的彩色方式/","link":"","permalink":"https://changakira.github.io/2024/08/07/volantis-navbar-logo-title%E7%9A%84%E5%BD%A9%E8%89%B2%E6%96%B9%E5%BC%8F/","excerpt":"查看Volantis社区源码时，突然发现 navbar 一栏 logo 使用了只填写 title 的方式，里面写的是 title: &#39;Volantis 6 &lt;sup style=&quot;color:#ff9800&quot;&gt;alpha&lt;/sup&gt;&#39;。这意味着在这一栏是支持CSS格式化的。","text":"查看Volantis社区源码时，突然发现 navbar 一栏 logo 使用了只填写 title 的方式，里面写的是 title: &#39;Volantis 6 &lt;sup style=&quot;color:#ff9800&quot;&gt;alpha&lt;/sup&gt;&#39;。这意味着在这一栏是支持CSS格式化的。 于是我写了 &#39;&lt;span style=&quot;color:#c3bef0;font-weight:bold&quot;&gt;MOYUAN&lt;/span&gt;&#39; ，效果正确。 我原本使用的是 &lt;p&gt; 标签，但是总觉得好像整体logo偏向上方，误以为是 &lt;p&gt; 标签为一个段落导致的，因此换用 &lt;span&gt; 标签，但感觉效果是一样的。也就是说这应该是我的错觉……？ 将其修改后，突然发现整体很不协调。 不协调！ 试图将相同方法应用在 menu 栏中，效果不正确，使用 F12 -inspector。 于是我按下F12 发现这样写的确会导致一些错误。 出来俩文字 看起来像是标签意外闭合了……不过我对前端了解极浅，所以就这样算啦！ 8月25日更新：我明白了，真傻。应该用的是Volantis的 &#123;% span %&#125; 用法。","categories":[{"name":"volantis主题","slug":"volantis主题","permalink":"https://changakira.github.io/categories/volantis%E4%B8%BB%E9%A2%98/"},{"name":"技巧","slug":"volantis主题/技巧","permalink":"https://changakira.github.io/categories/volantis%E4%B8%BB%E9%A2%98/%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://changakira.github.io/tags/Volantis%E4%B8%BB%E9%A2%98/"}]},{"title":"关于hexo-helper-live2d无法显示自己的模型的一种可能","slug":"关于hexo-helper-live2d无法显示自己的模型的一种可能","date":"2024-08-01T11:43:35.000Z","updated":"2024-08-25T10:21:26.000Z","comments":true,"path":"2024/08/01/关于hexo-helper-live2d无法显示自己的模型的一种可能/","link":"","permalink":"https://changakira.github.io/2024/08/01/%E5%85%B3%E4%BA%8Ehexo-helper-live2d%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD/","excerpt":"使用hexo-helper-live2d来为Hexo博客添加看板娘功能，若使用GitHub提供的模型则可以显示，按照其提示添加自己的模型则不能显示。检查lib完整、路径正确、模型看不出问题。","text":"使用hexo-helper-live2d来为Hexo博客添加看板娘功能，若使用GitHub提供的模型则可以显示，按照其提示添加自己的模型则不能显示。检查lib完整、路径正确、模型看不出问题。 省流检查模型是否是.moc3、.model3.json格式，这种格式在hexo-helper-live2d不被支持。请参考下面链接的问答： 关于moc和moc3格式的问题https://github.com/Eikanya/Live2d-model/issues/30 该问答所在的GitHub仓库也是一位大佬整理出来的Live2d模型。 救命今天一天都在检查究竟是哪里出了问题呢。。。整个网站还回滚了一次，好在并无大碍。 Your browser does not support the video tag. 由于直接引用B站视频画质不清晰，所以我将视频下载后再引用了。原视频地址 这个是我原本想使用的模型，来自Yuri幽里_official与慈善小霓老师。真的很可惜没能使用到！","categories":[{"name":"hexo","slug":"hexo","permalink":"https://changakira.github.io/categories/hexo/"},{"name":"插件","slug":"hexo/插件","permalink":"https://changakira.github.io/categories/hexo/%E6%8F%92%E4%BB%B6/"}],"tags":[{"name":"Hexo插件","slug":"Hexo插件","permalink":"https://changakira.github.io/tags/Hexo%E6%8F%92%E4%BB%B6/"}]},{"title":"datawhale-24-3-3-2","slug":"datawhale-24-3-3-2","date":"2024-07-29T08:15:38.000Z","updated":"2024-08-25T10:21:18.000Z","comments":true,"path":"2024/07/29/datawhale-24-3-3-2/","link":"","permalink":"https://changakira.github.io/2024/07/29/datawhale-24-3-3-2/","excerpt":"Hi大家好，这里依旧是默元。今天分享 Datawhale_AI夏令营 第二次任务！","text":"Hi大家好，这里依旧是默元。今天分享 Datawhale_AI夏令营 第二次任务！ 上一篇笔记中我们已经大致梳理了baseline的基本结构。今天继续详细解读代码，并回答几个小问题。 代码解读（接上一篇笔记）上一篇笔记点这里https://changakira.github.io/2024/07/25/datawhale-24-3-3-1/ 上一篇笔记中，对baseline代码详细解读到了# 这里使用extract抽取模获得抽取的结果这一部分。我们接着往下看。 # 这里使用extract抽取模获得抽取的结果 def extract(input_text): ans_pattern = re.compile(r&quot;答案是：(.)&quot;, re.S) problems = ans_pattern.findall(input_text) # print(problems) if(problems == &#39;&#39;): return &#39;A&#39; return problems[0] extract直译为提取，那么这个函数就是提取函数啦！input_text是什么？我们只知道它是“输入文本”的意思，它在哪里出现过吗？ 我们使用CTRL+F找一下。 只有这里 怎么回事呢？全部代码文件中，只有这里（和这个函数里面）出现了input_text，它到底是什么？ 其实，input_text在这里只是一个“形式参数”，而不是一个实际参数。形式参数可以和真正的参数名字一样，也可以不一样。这一点在大部分编程语言中都有类似情况。详细可以阅读这一篇文章： 深入理解函数的参数——实际参数（实参）和形式参数（形参）https://blog.csdn.net/JDSZGLLL/article/details/124403905 所以input_text是什么？我们要看extract函数在使用时传入参数传入了什么。所以我们后面遇到再解析。 我们再来看这个函数的功能。 re是一个python模块，re.compile函数用于编译正则表达式，生成一个 Pattern 对象，它的一般使用形式如下： re.compile(pattern[, flag]) 其中，pattern 是一个字符串形式的正则表达式，flag 是一个可选参数，表示匹配模式，比如忽略大小写，多行模式等。re.S表示使 . 匹配包括换行在内的所有字符。 更多内容可以阅读： 正则表达式re.compile()的使用https://blog.csdn.net/weixin_42793426/article/details/88545939 python中re.compile()用法详解https://blog.csdn.net/weixin_44799217/article/details/126456660 也就是说，在这里，我们将“返回形如 ‘答案是：(.)’ 中 . 的位置的所有字符（包括换行符在内）”。 这里我们需要结合上文的prompt看一下（在上一篇笔记中详细介绍过）： 上文的 prompt 内容prompt &#x3D; f”””你是一个逻辑推理专家，擅长解决逻辑推理问题。以下是一个逻辑推理的题目，形式为单项选择题。所有的问题都是（close-world assumption）闭世界假设，即未观测事实都为假。请逐步分析问题并在最后一行输出答案，最后一行的格式为”答案是：A”。题目如下： 我们可以看到，我们让大语言模型逐步分析问题并在最后一行输出答案，最后一行的格式为”答案是：A”。那么，通过上文”答案是：(.)”的正则表达式，我们便可以提取到大语言模型作出的答案。 接下来我们做了一个判断：如果我们提取到的结果为空字符串，则返回为’A’。否则的话返回为我们提取到的第0个结果。 为什么会有第0个结果呢，难道还可能有很多结果吗？为什么还会有空字符串的情况呢？ 我们可以想到，这都是因为大语言模型输出结果不准确，有时候，它可能在一段话中先后说出“答案是：A”和“答案是B”这样自相矛盾的结果，也可能根本没有遵守我们设定的格式，如回答“我认为答案是A”这样的情况。这时，baseline的处理方法是如果大语言模型没有按约定回答，则输出为A，如果大语言模型回答了多个，则输出为第一个回答。 知道了这一点后，我们就可以想到改进的办法。 我们可以改变prompt的措辞。 如，我们可以改成这样： prompt = f\"\"\"你是一个逻辑推理专家，擅长解决逻辑推理问题，能够从前后各语句之间的因果、转折、包含、递进等关系中推断出其他正确的信息。以下是一个逻辑推理的题目，形式为单项选择题。我将先给出一段基本的论断，论断都是正确的。接下来询问你几个选择题并附有几个选项，请逐步分析问题并在最后一行输出你认为正确的答案。一定注意，最后一行输出答案的格式为形如\"答案是：A\"的语句。所有的问题都是基于闭世界假设，即不确定，或已知的信息中未提到的信息为假(False)。一定注意，最后一行输出答案的格式为形如\"答案是：A\"的语句。题目如下： 当大模型输出结果不正确时，重新调用函数让大模型输出。使用这种方法时，要特别注意重试次数应该有一个上限（和上文尝试重连api次数一个道理）。这种方法我们下文会写。 我们继续看代码。 def process_datas(datas,MODEL_NAME): results = [] 定义函数process_datas，传入参数datas和MODEL_NAME。初始化一个空的results。 with ThreadPoolExecutor(max_workers=16) as executor: ThreadPoolExecutor线程池。max_workers最大工作者数量（直译），也就是最大的同时进行的线程数量。 Python 使用ThreadPoolExecutor时的max_workers数量选择https://geek-docs.com/python/python-ask-answer/770_python_number_of_max_workers_when_using_threadpoolexecutor_from_concurrentfutures.html 这一段代码使过程使用多线程执行，加快了执行速度。 def main(ifn, ofn): if os.path.exists(ofn): pass data = [] # 按行读取数据 with open(ifn) as reader: for line in reader: sample = json.loads(line) data.append(sample) datas = data # print(data) # 均匀地分成多个数据集 return_list = process_datas(datas,MODEL_NAME) print(len(return_list)) print(&quot;All tasks finished!&quot;) return return_list 主函数，读取数据，没什么特别的。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"AI","slug":"笔记/AI","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/AI/"}],"tags":[{"name":"Datawhale_AI夏令营","slug":"Datawhale-AI夏令营","permalink":"https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Datawhale_AI夏令营_24_3_3_1_记录","slug":"datawhale-24-3-3-1","date":"2024-07-25T09:07:02.000Z","updated":"2024-08-25T10:21:08.000Z","comments":true,"path":"2024/07/25/datawhale-24-3-3-1/","link":"","permalink":"https://changakira.github.io/2024/07/25/datawhale-24-3-3-1/","excerpt":"Hi大家好，这里依旧是默元。今天完成了Datawhale AI夏令营的第一次任务，有所收获。","text":"Hi大家好，这里依旧是默元。今天完成了Datawhale AI夏令营的第一次任务，有所收获。 关于从零入门AI+逻辑推理 是 Datawhale 2024 年 AI 夏令营第三期的学习活动（“AI+逻辑推理”方向），基于“第二届世界科学智能大赛逻辑推理赛道：复杂推理能力评估” 开展学习活动。适合想学习大语言模型、想用AI完成逻辑推理任务的学习者参与。 Task1内容报名赛事报名 第二届世界科学智能大赛逻辑推理赛道：复杂推理能力评估 比赛。 大赛官网 申领大模型API使用的开源模型这次我们为了保证大家可以顺利体验大模型，同时满足比赛要求，采用阿里开源大模型Qwen系列，通过api的形式调用，使用的模型是目前限时免费的 qwen1.5-1.8b-chat 模型。开通 DashScope(阿里云灵积平台) 可以获赠一些其他模型的限时免费使用额度，大部分有效期为30天。本Task代码跑一次需要大概 500w Tokens，大家可以尝试灵积平台上提供的其他开源模型的API服务，但注意不要超出赠送额度，否则会扣费。 阿里云灵积平台https://dashscope.console.aliyun.com/apiKey 创建API key 创建一个API key并保存在安全的地方。不要忘记或泄露！ 什么是“API”？ API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。API是接口。我们在日常生活中可能有这样的烦恼：为什么数据线的种类有这么多？micro、type C……我们有时直接叫做安卓口、苹果口、梯形口……当我们有一些不方便改变的接口，又不适合我们的需求时，我们就会用到下面这一类小东西：转接头。绿联USB 3.0转Type C转接头同样的，我们现在写了一堆代码。如何我们想要实现某个功能，但是这时我们发现这个功能不好集成到我们的代码中，或者干脆不好写、懒得写，恰巧别人写过这个功能了，我们就希望拿来使用。这时，功能的所有者可以把全部代码给我们，也可以自己保留代码，而给我们一个接口，我们只需要调用这个接口就可以使用他的函数。API就像一座桥梁，把我们连接起来。如果说我的代码是一块儿正方体，他的代码是一块儿球体，那么API就像一个一段是正方形一端是圆形的皮套把我们连接在一起。以上是我自己的理解和浅显的解答，更多内容可以看这一篇文章 什么是API？（看完你就理解了） 。 什么是“API key”？ 通过上面的解释，我们可以知道API权限对于API创建者来说很重要，要保证别人不能拿到API权限，也就是说，你是正方体，我是球体，你想要让我们结合，我就借你一个一面正方形一面圆形的皮套让我们连接起来。但是这个皮套是我的，不能让你随意使用，更不能让你对我的球体做更改。API 密钥是一个字母数字字符串，API 开发人员使用该字符串来控制对其 API 的访问权限。详细解释可以看amazon的这篇文章： 什么是 API 密钥？ 。 启动魔搭Notebook魔搭社区https://www.modelscope.cn/my/mynotebook/preset 使用默认的配置，点击启动。等待实例启动后，点击“查看Notebook”。 什么是“Notebook”？ Notebook我们都知道，是英文“笔记本”、“笔记本电脑”的意思。而在这里，“Notebook”指的其实就是“Jupyter Notebook”。我们可以看到，在魔搭平台页面上写明了：ModelScope社区与阿里云合作，Notebook功能由阿里云提供产品和资源支持。 什么是“Jupyter Notebook”？ Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。简而言之，Jupyter Notebook是以网页的形式打开，可以在网页页面中 直接 编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。我们可以看到，点击“查看Notebook”后，正是一个“Jupyter Notebook”界面。 体验baseline下载代码及测试集代码及测试集在DataWhale学习手册中可以找到，我就不再转载。 baseline01.ipynb是代码文件。round1_test_data.jsonl文件是测试集文件。 将这两个文件拖拽到Jupyter Notebook左侧文件栏进行上传。 填写API key在相应位置填写API key。 下载结果文件等待代码运行完成后（ 需要约30分钟 ），右键upload.jsonl文件，下载到本地。 提交至大赛将得到的结果文档 提交至大赛 ，大约两分钟后可以查看分数。 文件详解代码文件详解我们在Jupyter Notebook中再次打开代码文件。 pip install scipy openai tiktoken retry dashscope loguru pip是包管理工具。这里通过pip来下载一个包。 Python pip 安装与使用（菜鸟文档）https://www.runoob.com/w3cnote/python-pip-install-usage.html 代码图 下面跟的这一大堆是pip install过程中的输出。由于我的已经运行过一遍，所以可以看到一堆”Requirement already satisfied”（请求已经满足了），后面还有一些路径，就是我们要下载的包，它已经存在于这个路径下。 提示pip更新 这里提示我们更新pip，因为没必要，所以不用管它。而我记得在自己电脑上，这是一个大坑，为什么是大坑我忘了反正搞了不知道多少次都没搞好。。。 from multiprocessing import Process, Manager import json import os from pprint import pprint import re from tqdm import tqdm import random import uuid import openai import tiktoken import json import numpy as np import requests from retry import retry from scipy import sparse #from rank_bm25 import BM25Okapi #import jieba from http import HTTPStatus import dashscope from concurrent.futures import ThreadPoolExecutor, as_completed from loguru import logger import json import time from tqdm import tqdm 接下来这些都是导入模块。 logger.remove() # 移除默认的控制台输出 logger.add(&quot;logs/app_&#123;time:YYYY-MM-DD&#125;.log&quot;, level=&quot;INFO&quot;, rotation=&quot;00:00&quot;, retention=&quot;10 days&quot;, compression=&quot;zip&quot;) 这俩关于日志的不是太懂。 不过我可以猜测一下： 移除默认的控制台输出。这个注释里也告诉我们了。添加日志语句。添加的内容就是引号里面的。time:YYYY-MM-DD是典型的日期格式了，YYYY表示四位数year，MM表示两位数month，DD表示两位数date，中间用“-”连接。level&#x3D;”INFO”，很明显是说日志等级。INFO为information，我们可以认为是一般重要的日志信息。我们可以猜测level还有error、warning值，它们不仅是等级标识，也可以作为分类依据。后面的确实不懂。 MODEL_NAME = &#39;qwen2-7b-instruct&#39; 模型名称。可以猜得到是通义千问系列。 # 注意：这里需要填入你的key~ 咱们在第二步申请的。 dashscope.api_key=&quot;sk-&quot; 填写API key，让我们的可以通过接口访问得到资源。 这段代码定义了一个名为 call_qwen_api 的函数，该函数用于调用一个名为 dashscope.Generation 的 API 来生成文本。以下是该代码的功能、用途和特点的详细介绍： 功能 调用 API 生成文本：该函数通过传递一个模型名称 (MODEL_NAME) 和一个查询 (query) 来调用 dashscope.Generation.call 方法，生成相应的文本。 处理 API 响应：函数会检查 API 的响应状态码，如果状态码为 HTTPStatus.OK，则提取并返回生成的文本内容。如果状态码不是 HTTPStatus.OK，则打印错误信息并抛出异常。 用途 文本生成：该函数主要用于通过调用外部 API 来生成文本，适用于需要动态生成内容的场景，如聊天机器人、内容创作辅助等。 错误处理：通过检查 API 响应状态码并处理错误情况，确保在调用失败时能够及时发现并处理问题。 特点 重试机制：函数使用了 @retry(delay=3, tries=3) 装饰器，这意味着在调用 API 失败时，函数会自动重试最多 3 次，每次重试间隔 3 秒。 消息格式：在调用 API 时，设置了 result_format=‘message’，表示期望的响应格式是消息格式。 错误处理：在 API 调用失败时，函数会打印详细的错误信息，包括请求 ID、状态码、错误代码和错误消息，并抛出异常，以便上层调用者能够捕获并处理这些错误。 接下来有一串注释。注释中的“这段代码”指向并不是特别清楚，我们可以CTRL+F找一下“call_qwen_api”函数。 call_qwen_api函数 我们可以看到，下面两块儿代码是与这有关的。 def api_retry(MODEL_NAME, query): 定义api_retry函数，传入参数是 MODEL_NAME 与 query 。可以想得到这个函数的作用就是“重试”，在学习过程中，计算机网络这门课中出现次数比较多。MODEL_NAME为模型名字，上文已经定义。query意为查询，接下来解析。 max_retries = 5 retry_delay = 60 # in seconds attempts = 0 max_retries最大重试次数。如果连接不到api，我们不可能一直重试，这里我们选择最大重试次数为5，即如果重试次数达到5次，那就不要再试了，浪费时间，中断、显示error。 retry_delay &#x3D; 60，单位是秒。如果连接不到api，立马重试的话，多半还是连接不上。我们可以稍等一会儿再去连接。这里等待的时间就是1分钟。 attempts是我们已经尝试的次数，初始值为0.每尝试一次，使attempts加1，再与max_retries比较。 while attempts &lt; max_retries: try: return call_qwen_api(MODEL_NAME, query) except Exception as e: attempts += 1 if attempts &lt; max_retries: logger.warning(f&quot;Attempt &#123;attempts&#125; failed for text: &#123;query&#125;. Retrying in &#123;retry_delay&#125; seconds...&quot;) time.sleep(retry_delay) else: logger.error(f&quot;All &#123;max_retries&#125; attempts failed for text: &#123;query&#125;. Error: &#123;e&#125;&quot;) raise try……except……是python中常用的处理异常的语句，我们把可能发生错误的语句放在try模块里，用except来处理异常。 这里，我们试图（try）调用call_qwen_api函数（下一大块儿代码中定义的）。如果发生异常，则重试次数+1，检查重试次数是否超过max_retries。如果未超过，日志打印一份”Warning”，提示“Retrying in {retry_delay} seconds…”（将在{retry_delay}秒后重试），而{retry_delay}就是我们设定的60.接下来，time.sleep(retry_delay)休眠60s。由于是while语句，接下来将返回try部分。如果重试次数已经超过最大重试次数，则日志打印”error”，将错误原因”e”打印出来。从这里我们可以看出，上文对于日志的猜测是完全正确的。 为什么错误原因是”e”呢？因为except Exception as e:。 try……except……详解https://blog.csdn.net/aliYz/article/details/128955150 def call_qwen_api(MODEL_NAME, query): # 这里采用dashscope的api调用模型推理，通过http传输的json封装返回结果 messages = [ &#123;&#39;role&#39;: &#39;user&#39;, &#39;content&#39;: query&#125;] response = dashscope.Generation.call( MODEL_NAME, messages=messages, result_format=&#39;message&#39;, # set the result is message format. ) if response.status_code == HTTPStatus.OK: # print(response) return response[&#39;output&#39;][&#39;choices&#39;][0][&#39;message&#39;][&#39;content&#39;] else: print(&#39;Request id: %s, Status code: %s, error code: %s, error message: %s&#39; % ( response.request_id, response.status_code, response.code, response.message )) raise Exception() 这里就到call_qwen_api函数本身了，可以看上面的那一块儿注释。 # 这里定义了prompt推理模版 def get_prompt(problem, question, options): options = &#39;\\n&#39;.join(f&quot;&#123;&#39;ABCDEFG&#39;[i]&#125;. &#123;o&#125;&quot; for i, o in enumerate(options)) prompt = f&quot;&quot;&quot;你是一个逻辑推理专家，擅长解决逻辑推理问题。以下是一个逻辑推理的题目，形式为单项选择题。所有的问题都是（close-world assumption）闭世界假设，即未观测事实都为假。请逐步分析问题并在最后一行输出答案，最后一行的格式为&quot;答案是：A&quot;。题目如下： ### 题目: &#123;problem&#125; ### 问题: &#123;question&#125; &#123;options&#125; &quot;&quot;&quot; # print(prompt) return prompt 什么是 prompt ？在使用大语言模型时，使用 prompt 往往可以获得更好、更精确的结果。prompt直译为“提示语”。现在已经有专门研究大语言模型prompt的工作（prompt engineer）。 关于提示工程（Prompt Engineering）https://www.promptingguide.ai/zh 在我的理解中，大语言模型其实就是一个基于概率机器人。它会根据你的问题，计算各个字（实际上通常是是几个字几个字作为整体）的概率，输出概率最大的那个。并且，前面的回答内容也将作为依据加入到后续回答的计算中，这也就是为什么我们看到的大语言模型基本全是几个字几个字地在输出，并不是为了显示效果，而是技术决定的。（我们当然也可以先将各结果放在一个缓冲区一样的东西中，再一并输出给用户。） 因此，通过prompt为大模型设置一个身份（在这里，我们告诉大模型“你是一个逻辑推理专家”），可以让大模型计算概率时向这方面靠拢。但是设置prompt也并不像我们自然语言表达的那样简单，由于大模型将几个字几个字看作为一组数据，我们对prompt的更改并不总会起作用。例如（只是例如）：“你是一个逻辑推理专家”和“你是一个逻辑推理学者”的区别对大模型的影响可能微乎其微，也可能影响很大。这就是prompt工程师的工作。 以上是代码的通用部分一些简单的分析。接下来就是一些具体的分析过程，包括提交任务，读取数据，返回结果，格式化结果等，不再详细介绍。 测试集文件详解下面对测试集文件做简单分析。 学习手册中写明： 测试集中包含500条测试数据。每个问题包括若干子问题，每个子问题为单项选择题，选项不定（最多5个）具体的，每条训练数据包含 content, questions字段，其中content是题干，questions为具体的子问题。questions是一个子问题列表，每个子问题包括options和answer字段，其中options是一个列表，包含具体的选项，按照ABCDE顺序排列，answer是标准答案。测试集 round1_test_data.jsonl 不包含answer字段。 我们使用记事本或类似软件（我使用NotePad–）打开测试集文件。 简单看一下第一行： &#123;&quot;problem&quot;: &quot;有一群人和一些食物类型。下列是关于这些个体和食物的已知信息：\\n\\n1. 鸡肉是一种食物。\\n2. 苹果是一种食物。\\n3. 如果X吃了Y，且X活着，则Y是一种食物。\\n4. Bill存活。\\n5. Bill吃了花生。\\n6. John吃所有食物。\\n7. Sue吃所有Bill吃的食物。\\n8. John喜欢所有食物。\\n\\n根据以上信息，回答以下选择题：&quot;, &quot;questions&quot;: [&#123;&quot;question&quot;: &quot;选择题 1：\\n谁喜欢吃花生？&quot;, &quot;options&quot;: [&quot;Bill&quot;, &quot;Sue&quot;, &quot;John&quot;, &quot;None of the above&quot;]&#125;], &quot;id&quot;: &quot;round1_test_data_000&quot;&#125; \\n表示换行。但不是在文件本身中换行，而是要在读取数据的时候换行。为了方便阅读，我们改写一下格式： &#123; problem: 有一群人和一些食物类型。下列是关于这些个体和食物的已知信息： 1. 鸡肉是一种食物。 2. 苹果是一种食物。 3. 如果X吃了Y，且X活着，则Y是一种食物。 4. Bill存活。 5. Bill吃了花生。 6. John吃所有食物。 7. Sue吃所有Bill吃的食物。 8. John喜欢所有食物。 根据以上信息，回答以下选择题： questions: 选择题 1： 谁喜欢吃花生？ options: [&quot;Bill&quot;, &quot;Sue&quot;, &quot;John&quot;, &quot;None of the above&quot;]&#125;] id: round1_test_data_000 &#125; 注意实际程序中并不是这样处理数据的，我们只是为了方便研究而改写格式！ 哈哈，是一道很简单的问题，我们人类可以很轻松地回答出来。但是对于大语言模型，这个问题真的好回答吗？读者可以复制上面改写好格式的文本去考考大语言模型。 结果文件详解最后我们看一下得到的结果文件（upload.jsonl）的第一行。 &#123;&quot;problem&quot;: &quot;有一群人和一些食物类型。下列是关于这些个体和食物的已知信息：\\n\\n1. 鸡肉是一种食物。\\n2. 苹果是一种食物。\\n3. 如果X吃了Y，且X活着，则Y是一种食物。\\n4. Bill存活。\\n5. Bill吃了花生。\\n6. John吃所有食物。\\n7. Sue吃所有Bill吃的食物。\\n8. John喜欢所有食物。\\n\\n根据以上信息，回答以下选择题：&quot;, &quot;questions&quot;: [&#123;&quot;question&quot;: &quot;选择题 1：\\n谁喜欢吃花生？&quot;, &quot;options&quot;: [&quot;Bill&quot;, &quot;Sue&quot;, &quot;John&quot;, &quot;None of the above&quot;], &quot;answer&quot;: &quot;D&quot;&#125;], &quot;id&quot;: &quot;round1_test_data_000&quot;&#125; 我们对比可以发现，仅多了&quot;answer&quot;: &quot;D&quot;这一字段。看来我们的这个模型做错了呢。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"AI","slug":"笔记/AI","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/AI/"}],"tags":[{"name":"Datawhale_AI夏令营","slug":"Datawhale-AI夏令营","permalink":"https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"HiVolanyisAssistant_READ_ME","slug":"HiVolanyisAssistant","date":"2024-07-24T10:55:24.000Z","updated":"2024-08-25T10:21:22.000Z","comments":true,"path":"2024/07/24/HiVolanyisAssistant/","link":"","permalink":"https://changakira.github.io/2024/07/24/HiVolanyisAssistant/","excerpt":"哈喽大家好哇！最近没更新都是在干这件事啦！这是我编写的一个简化博客书写的小工具-Volantis Assistant。","text":"哈喽大家好哇！最近没更新都是在干这件事啦！这是我编写的一个简化博客书写的小工具-Volantis Assistant。 Volantis_Assistant一个Hexo框架-Voalntis主题的书写博客助手，帮助快速书写一些非标准MarkDown写法。通过修改规则，也可用于Hexo的其它主题。 重要提示由于作者水平太差了，所以除主界面外，请使用页面上的“Back”按钮返回，否则会引发错误。 开源与下载开源使用Desktop Qt 5.7.1 MSVC2015_64bit编写，代码详见main分支，描述为”code”。 下载点击download文件夹，点击volantis_assistant_v_1_0.rar（或其它版本）文件。 点击下载按钮 点击图中红圈所指的下载按钮。 也可以通过夸克网盘分享文件下载，提取码：hdD4。 将.RAR文件解压缩至合适位置，点击.exe即可使用。 AboutVolantis是Hexo框架的一个主题，官方网站Volantis. Volantis主题提供一些插件等的快捷写法以及很多主题带来的元素效果。仅以插入图片来说，有四五种效果、功能不尽相同的写法。我在写自己的博客时，经常需要一边看Volantis文档一边写。有一次，我在网上学了一种前端效果并用在自己的博客文章中，后来才发现Volantis已经有该效果插件，不需要自己再写。这些增加了作者的书写量，带来了一些重复性的工作，作者需要记忆相当量的MarkDown“方言”。于是我编写了这样一个工具，使常用的一些非标准MarkDown写法插入变得简单。 该工具简化了博客书写过程，让作者更加专注于内容本身的书写。通过配置规则集文件，也可以适用于其它主题。 本项目为开源项目，使用Qt5.7.1.0框架编写。本人学生，才思不足，疏漏百出。如果对你有一点点的帮助，希望点一个标星，或在B站介绍视频中点一个免费的赞。 项目介绍视频在B站，代码开源于Github，部分细节在我的博客网站中介绍。 在这里，我想感谢学校、BOE俱乐部对我的帮助。 介绍各界面介绍主界面主界面 AboutAbout 跟上文的About内容是一样的。 选择规则集页面选择规则集页面 在编辑规则集和开始一个新编辑之前均会出现。支持三个规则集文件，规则集文件是保存在软件目录下的形如 “rule_set_1” 的.txt文件。首次打开软件时创建这三个默认规则集。 编辑规则集页面编辑规则集页面 读取规则集文件并显示。在输入框中任意编辑，点击该界面上的”SAVE”按钮保存。 不可同时打开多个编辑规则集界面。（软件中已做限制） 摸鱼界面还没做，哈哈 编辑文字界面编辑文字界面 点击右侧按钮，插入对应语法。请在文字框中使用Ctrl + C 和 Ctrl + V。 可以同时打开多个编辑文字界面。不能同时打开编辑规则集界面和编辑文字界面。（软件中已做限制） 规则集文件具体介绍规则集文件示例规则集文件示例 提示文字形如 {:%规则集名%:} 的内容为直接使用记事本(NotePad)等打开规则集文件时的提示文字 没什么用处。 这段字符之后就是会在编辑时插入的文字。 需自己填写的字段下划线+文字的内容表示这部分是在编辑文字时需要自己填写的地方。这部分内容有： _链接 _IMG_链接 _宽度 _高度 _文字 _标题 _参数参考各类便签 在便签块儿(NodeBlock)中 _颜色 _这里随便写点什么，但同一个页面内多个Tab块儿这里的内容不能重复 在Tabs中 _时间线标题 _网盘类型 _PSW _FILE_名称 _PSW表示的是网盘提取码 编辑时，插入相应MarkDown写法后，应将这部分内容替换为自己需要的内容。 可省略的字段规则集中，以$ $来包裹可省略的字段。 如复选框 &#123;:%复选框%:&#125;&#123;% checkbox ~$_颜色$~ ~$checked$~ ::_文字 %&#125; 在编辑文字时插入后，文字编辑框中就会出现&#123;% checkbox ~$_颜色$~ ~$checked$~ ::_文字 %&#125;。这是，我们将 _文字 替换为我们需要的文字。而被$ $包裹的 _颜色 和 checked 字段为可省略字段。 如果不需要可省略字段，应将其（连同 $ $ 符号）删除。若需要该可省略字段，则只需要删除 $ $ 符号。 如，这些是正确的： &#123;% checkbox ::_文字 %&#125; 复选框样式文字。 &#123;% checkbox checked ::_文字 %&#125; 选中的复选框样式文字。 &#123;% checkbox blue ::_文字 %&#125; 蓝色的复选框样式文字。 &#123;% checkbox blue checked ::_文字 %&#125; 蓝色的选中的复选框样式文字。 换行在规则集文件中，使用汉字字符“丨”（gun，三声）作为换行符。在自定义规则中需要换行的，只需要在需要换行的地方插入 一个 “丨”，程序中就会自动插入空行。 请不要随意在记事本(NotePad)中修改由于程序中已经写死，所以规则集文件最多有50行，且前45行顺序调换后会导致提示文字和实际输入MarkDown写法不匹配。 对参数有疑问？对参数有疑问的部分，请查阅Volantis标签插件文档。 使用首先，使用命令行新建文件。打开文件，自行输入标签(tags)、目录(categories)等（这些和不使用软件是一样的）。 接下来打开软件。确认规则集无误。打开编辑页面。 编辑完成后，将内容复制到文件中。 相关页面 我的博客页面HiVolanyisAssistant B站https://space.bilibili.com/481184837 邮箱a259759666@163.com gitter聊天室https://app.gitter.im/#/room/#maimuju:gitter.im 如果还有任何问题，我期望得到与你的联系！","categories":[{"name":"小玩意儿","slug":"小玩意儿","permalink":"https://changakira.github.io/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/"},{"name":"Qt5.7.1","slug":"小玩意儿/Qt5-7-1","permalink":"https://changakira.github.io/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/Qt5-7-1/"},{"name":"volantis_assistant","slug":"小玩意儿/Qt5-7-1/volantis-assistant","permalink":"https://changakira.github.io/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/Qt5-7-1/volantis-assistant/"}],"tags":[{"name":"小玩意儿","slug":"小玩意儿","permalink":"https://changakira.github.io/tags/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/"}]},{"title":"杂谈-你也在不断重复造轮子吗","slug":"misc-重复造轮子","date":"2024-07-13T14:45:51.000Z","updated":"2024-08-25T10:22:30.000Z","comments":true,"path":"2024/07/13/misc-重复造轮子/","link":"","permalink":"https://changakira.github.io/2024/07/13/misc-%E9%87%8D%E5%A4%8D%E9%80%A0%E8%BD%AE%E5%AD%90/","excerpt":"杂谈-观重复造轮子有感","text":"杂谈-观重复造轮子有感 我在Qt旧版本（以5.7.1.0为例）连接mysql数据库一文中，自己在W3school上找了一个隐藏文字的效果，然后用在了了这篇文章放代码的地方。 当天晚上，在寻找其它东西的时候就发现，volantis主题已经提供了这样的标签：folding。不得不承认，当时我是非常难过的。 写一下 效果完全一样，但是集成度更高，与整体主题更符合。 我看过一句感触特别深的话： 汗流浃背了没？ 本来还想升华一下主题的，但是有点困了。 晚安，世界😊😊","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://changakira.github.io/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://changakira.github.io/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"Hexo创建自定义的html页面","slug":"html-posts","date":"2024-07-12T09:15:26.000Z","updated":"2024-08-25T10:31:24.000Z","comments":true,"path":"2024/07/12/html-posts/","link":"","permalink":"https://changakira.github.io/2024/07/12/html-posts/","excerpt":"当我们想在自己用Hexo搭建的博客页上展示前端代码的效果时，总会遇到麻烦：有时候hexo的主题样式会优先显示。如果我们能写完全的html网页多好呢！","text":"当我们想在自己用Hexo搭建的博客页上展示前端代码的效果时，总会遇到麻烦：有时候hexo的主题样式会优先显示。如果我们能写完全的html网页多好呢！ 文件夹准备在hexo的source文件夹下创建一个存放这些html页面的文件夹，如我创建的是HTML文件夹，如图。 在该文件夹里编写html文件。 使hexo对该文件夹下的文件不进行渲染在主题的或hexo的_cofig.yml中修改skip_render项（若（主题的）_config.yml中没有这一项，在合适的地方添加即可）。在skip_render：后面加上要跳过渲染的文件夹名称（这里还是以文件夹名称为HTML为例）。 修改方式有几种： skip_render: HTML/xxxx.html 只跳过该文件的渲染 skip_render: HTML/* 单个文件夹下的全部文件 skip_render: HTML/*.html 该文件夹下某一类型的全部文件 skip_render: HTML/** 该文件夹下的全部子文件夹和文件 skip_render: - &#39;HTML1/*.html&#39; - &#39;HTML2/**&#39; 多个文件夹或其它复杂情况 以上修改中，若写为单行（1~4的情况），则不需要加引号。写为多行（5）的情况，则需要加引号，单引号双引号均可。 另外，单行的也可以写成多行的便于以后增添或删除，注意添加引号，如情况2也可以写作： skip_render: - &#39;HTML1/*&#39; 查看效果使用hexo clean，hexo s命令开启本地服务器。地址栏输入相应的网址打开网页查看效果。在本例中，html文件在source文件夹下HTML文件夹下，因此网址是http://localhost:4000/HTML/test.html。 使用首先明确，这样做完以后，hexo d部署以后，在互联网上只能通过输入url的方式打开这个页面（将http://localhost:4000替换成你相应的域名），为了更便于阅读，以前端代码为例，我大致总结出几种使用方式。 1.在一篇文章写原理和代码，插入超链接展示效果2.在一篇文章中，使用iframe标签展示效果请参考iframe标签 效果大致是这样的： 3.在hexo顶端栏目中添加传送门就像首页、归档、友链这些东西一样","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/categories/Hexo/"},{"name":"用法","slug":"Hexo/用法","permalink":"https://changakira.github.io/categories/Hexo/%E7%94%A8%E6%B3%95/"},{"name":"自定义html","slug":"Hexo/用法/自定义html","permalink":"https://changakira.github.io/categories/Hexo/%E7%94%A8%E6%B3%95/%E8%87%AA%E5%AE%9A%E4%B9%89html/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://changakira.github.io/tags/hexo/"},{"name":"html","slug":"html","permalink":"https://changakira.github.io/tags/html/"}]},{"title":"二进制文件","slug":"二进制文件","date":"2024-05-23T15:08:15.000Z","updated":"2024-08-25T12:22:58.000Z","comments":true,"path":"2024/05/23/二进制文件/","link":"","permalink":"https://changakira.github.io/2024/05/23/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"杂项","slug":"杂项","permalink":"https://changakira.github.io/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"杂项","slug":"杂项","permalink":"https://changakira.github.io/tags/%E6%9D%82%E9%A1%B9/"},{"name":"二进制文件","slug":"二进制文件","permalink":"https://changakira.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/"}]},{"title":"qCharts避免多个表造成的卡顿","slug":"qCharts避免多个表造成的卡顿","date":"2024-05-23T14:41:49.000Z","updated":"2024-08-25T12:23:06.000Z","comments":true,"path":"2024/05/23/qCharts避免多个表造成的卡顿/","link":"","permalink":"https://changakira.github.io/2024/05/23/qCharts%E9%81%BF%E5%85%8D%E5%A4%9A%E4%B8%AA%E8%A1%A8%E9%80%A0%E6%88%90%E7%9A%84%E5%8D%A1%E9%A1%BF/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"Qt","slug":"Qt","permalink":"https://changakira.github.io/categories/Qt/"},{"name":"技巧","slug":"Qt/技巧","permalink":"https://changakira.github.io/categories/Qt/%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"https://changakira.github.io/tags/Qt/"}]},{"title":"使用bat文件进行预操作的思路","slug":"使用bat文件进行预操作的思路","date":"2024-05-23T10:22:36.000Z","updated":"2024-08-25T12:23:08.000Z","comments":true,"path":"2024/05/23/使用bat文件进行预操作的思路/","link":"","permalink":"https://changakira.github.io/2024/05/23/%E4%BD%BF%E7%94%A8bat%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E9%A2%84%E6%93%8D%E4%BD%9C%E7%9A%84%E6%80%9D%E8%B7%AF/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"杂项","slug":"杂项","permalink":"https://changakira.github.io/categories/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"杂项","slug":"杂项","permalink":"https://changakira.github.io/tags/%E6%9D%82%E9%A1%B9/"},{"name":"bat文件","slug":"bat文件","permalink":"https://changakira.github.io/tags/bat%E6%96%87%E4%BB%B6/"}]},{"title":"wsl2","slug":"wsl2与xfce4中文与输入法设置","date":"2024-05-23T09:25:37.000Z","updated":"2024-08-25T10:31:30.000Z","comments":true,"path":"2024/05/23/wsl2与xfce4中文与输入法设置/","link":"","permalink":"https://changakira.github.io/2024/05/23/wsl2%E4%B8%8Exfce4%E4%B8%AD%E6%96%87%E4%B8%8E%E8%BE%93%E5%85%A5%E6%B3%95%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/categories/WSL2/"},{"name":"用法","slug":"WSL2/用法","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/"},{"name":"xfce4","slug":"WSL2/用法/xfce4","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/xfce4/"}],"tags":[{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/tags/WSL2/"},{"name":"xfce4","slug":"xfce4","permalink":"https://changakira.github.io/tags/xfce4/"}]},{"title":"wsl2的网络连接","slug":"wsl2的网络连接","date":"2024-05-23T09:24:43.000Z","updated":"2024-08-25T10:31:30.000Z","comments":true,"path":"2024/05/23/wsl2的网络连接/","link":"","permalink":"https://changakira.github.io/2024/05/23/wsl2%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/categories/WSL2/"},{"name":"用法","slug":"WSL2/用法","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/"}],"tags":[{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/tags/WSL2/"},{"name":"xfce4","slug":"xfce4","permalink":"https://changakira.github.io/tags/xfce4/"}]},{"title":"wsl，xfce4与XLaunch的图形化界面","slug":"wsl与图形化界面（Ubuntu24-04与xfce4为例）","date":"2024-05-23T09:24:24.000Z","updated":"2024-08-25T10:31:28.000Z","comments":true,"path":"2024/05/23/wsl与图形化界面（Ubuntu24-04与xfce4为例）/","link":"","permalink":"https://changakira.github.io/2024/05/23/wsl%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%88Ubuntu24-04%E4%B8%8Exfce4%E4%B8%BA%E4%BE%8B%EF%BC%89/","excerpt":"使用xfce4与XLaunch的小伙伴们，相信在究竟如何稳定打开图形化界面一定受过很多困扰。按照网上的教程，有时候可行，有时候哐哐报错。这里我摸索出来稳定的方法。","text":"使用xfce4与XLaunch的小伙伴们，相信在究竟如何稳定打开图形化界面一定受过很多困扰。按照网上的教程，有时候可行，有时候哐哐报错。这里我摸索出来稳定的方法。 已经安装好xfce4与XLaunch,只是不知道如何稳定打开图形化界面的同学，请点击右侧目录跳转至第3节。 另注：这一篇文章中我尝试了使用volantis主题提供的标签插件，还有更改了插入图片的写法 搭配食用~ Your browser does not support the audio tag. 1.WSL安装xfce4先更新apt-get sudo apt-get update &amp;&amp; sudo apt-get upgrade -y xorg是xfce桌面需要的一个基础依赖 sudo apt-get install xorg 安装XFCE桌面环境 sudo apt-get install xfce4 -y xfce4-goodies是一个丰富某些功能的包。具体内容可以移步此处。 sudo apt-get install xfce4-goodies -y 2.安装XLaunch这是Windows软件 默认安装即可 去下载网站！ 3.打开图形化界面打开X-Launch软件，选择One large window，Display number选择0。 X-Launch软件 点击几次下一页，这里将最后一项勾选上，然后点下一页、完成。出现一个大的黑窗口。 将最后一项勾选上 Linux中输入 export DISPLAY=localhost:0 然后输入 startxfce4 等待完成后，就能在刚刚的黑窗口中看到图形化窗口了。 linux中显示内容 桌面。悄悄告诉你，我的壁纸来自《风灵玉秀》 4.关闭图形化界面直接点击右上角关闭，点击Exit。 点击Exit 然后在Linux中按CTRL + C。 按Ctrl+C 5.总结要再打开图形化界面，只要重复做3和4即可。","categories":[{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/categories/WSL2/"},{"name":"用法","slug":"WSL2/用法","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/"},{"name":"xfce4","slug":"WSL2/用法/xfce4","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/xfce4/"}],"tags":[{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/tags/WSL2/"},{"name":"xfce4","slug":"xfce4","permalink":"https://changakira.github.io/tags/xfce4/"}]},{"title":"hackrf在linux下","slug":"hackrf在linux下","date":"2024-05-23T09:23:26.000Z","updated":"2024-08-25T12:22:28.000Z","comments":true,"path":"2024/05/23/hackrf在linux下/","link":"","permalink":"https://changakira.github.io/2024/05/23/hackrf%E5%9C%A8linux%E4%B8%8B/","excerpt":"","text":"忙完这段时间写 hackrf_transfer -r hackrf_copied.iq -f 95500000 -a 1 -l 16 -s 8000000 explorer.exe .","categories":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/categories/hackRF/"},{"name":"用法","slug":"hackRF/用法","permalink":"https://changakira.github.io/categories/hackRF/%E7%94%A8%E6%B3%95/"}],"tags":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/tags/hackRF/"}]},{"title":"windows与hackRF收听广播","slug":"windows与hackRF收听广播","date":"2024-05-23T09:23:02.000Z","updated":"2024-08-25T12:22:56.000Z","comments":true,"path":"2024/05/23/windows与hackRF收听广播/","link":"","permalink":"https://changakira.github.io/2024/05/23/windows%E4%B8%8EhackRF%E6%94%B6%E5%90%AC%E5%B9%BF%E6%92%AD/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/categories/hackRF/"},{"name":"用法","slug":"hackRF/用法","permalink":"https://changakira.github.io/categories/hackRF/%E7%94%A8%E6%B3%95/"}],"tags":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/tags/hackRF/"}]},{"title":"hackRF_one_基本使用","slug":"hackRF-one-基本使用（linux下录制与Windows中绘制图形）（包括Windows访问wsl2文件）","date":"2024-05-23T09:22:30.000Z","updated":"2024-08-25T12:22:52.000Z","comments":true,"path":"2024/05/23/hackRF-one-基本使用（linux下录制与Windows中绘制图形）（包括Windows访问wsl2文件）/","link":"","permalink":"https://changakira.github.io/2024/05/23/hackRF-one-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88linux%E4%B8%8B%E5%BD%95%E5%88%B6%E4%B8%8EWindows%E4%B8%AD%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%EF%BC%89%EF%BC%88%E5%8C%85%E6%8B%ACWindows%E8%AE%BF%E9%97%AEwsl2%E6%96%87%E4%BB%B6%EF%BC%89/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/categories/hackRF/"},{"name":"用法","slug":"hackRF/用法","permalink":"https://changakira.github.io/categories/hackRF/%E7%94%A8%E6%B3%95/"}],"tags":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/tags/hackRF/"}]},{"title":"wsl共享主机usb设备（以hackrf_one为例）","slug":"wsl共享主机usb设备（以hackrf-one为例）","date":"2024-05-23T09:21:57.000Z","updated":"2024-08-25T12:22:44.000Z","comments":true,"path":"2024/05/23/wsl共享主机usb设备（以hackrf-one为例）/","link":"","permalink":"https://changakira.github.io/2024/05/23/wsl%E5%85%B1%E4%BA%AB%E4%B8%BB%E6%9C%BAusb%E8%AE%BE%E5%A4%87%EF%BC%88%E4%BB%A5hackrf-one%E4%B8%BA%E4%BE%8B%EF%BC%89/","excerpt":"","text":"忙完这段时间写","categories":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/categories/hackRF/"},{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/categories/WSL2/"},{"name":"用法","slug":"hackRF/用法","permalink":"https://changakira.github.io/categories/hackRF/%E7%94%A8%E6%B3%95/"},{"name":"用法","slug":"WSL2/用法","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/"},{"name":"遇到问题","slug":"WSL2/遇到问题","permalink":"https://changakira.github.io/categories/WSL2/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/tags/hackRF/"},{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/tags/WSL2/"}]},{"title":"Qt旧版本（以5.7.1.0为例）连接mysql数据库","slug":"qt-connect-mysql","date":"2024-05-11T10:49:36.000Z","updated":"2024-08-25T10:23:56.000Z","comments":true,"path":"2024/05/11/qt-connect-mysql/","link":"","permalink":"https://changakira.github.io/2024/05/11/qt-connect-mysql/","excerpt":"网上查阅Qt如何连接mysql数据库，多为新版本Qt（需要自己编译动态链接库），对旧版本Qt连接描述较少，回答也不甚清晰。","text":"网上查阅Qt如何连接mysql数据库，多为新版本Qt（需要自己编译动态链接库），对旧版本Qt连接描述较少，回答也不甚清晰。 在QT中打印当前QT版本支持的数据库为简便起见，新建一个Qt console application即可。 全部选择默认创建。 .pro文件中，添加 qt += sql .cpp文件中，添加 #include &lt;QDebug&gt; 和 qDebug() &lt;&lt; QSqlDatabase::drivers(); 运行，在下方“3 应用程序输出”中查看结果，如下图所示，在旧版本Qt中，已经默认自带MySQL的动态链接库（结果中有“QMYSQL”）。 全部代码跳转此处查看（本文中除上述三条代码外未做任何改动）（也可以将如上三条语句放在任意已经存在的项目中） 库文件拷贝确认该版本的Qt默认支持MySQL后，将MySQL安装目录下的lib文件夹中这两个库文件（如图所示）拷贝到QT安装目录的bin文件夹下。 检查是否可以成功连接数据库使用如下代码： QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QMYSQL&quot;); //链接数据库 db.setHostName(&quot;127.0.0.1&quot;); db.setUserName(&quot;root&quot;); db.setPassword(&quot;123456&quot;); db.setDatabaseName(&quot;mysql&quot;); if(!db.open())&#123; qDebug() &lt;&lt; &quot;0&quot;; &#125;else&#123; qDebug() &lt;&lt; &quot;1&quot;; &#125; 将其添加至上面创建的main.cpp中。 需要注意的是，这样写，点击运行会导致程序异常退出。推测原因是程序还在等待操作的循环中，具体原因也不太清楚。发现若删除return a.exec();代码，则变为每次重新运行时报错。读到return a.exec()的具体含义解释文章，尝试在return a.exec()之前添加exit(0)，问题解决。 先在终端管理员中打开MySQL服务： net start mysql 然后运行Qt项目，下方“3 应用程序输出”中输出0表示连接不成功，输出1表示连接成功。 若连接失败，可先尝试使用终端管理员查看能否登录数据库： mysql -u your_username -p 全部代码跳转此处查看（和上面的全部代码传送门指向一个地方）","categories":[{"name":"数据库","slug":"数据库","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Qt","slug":"Qt","permalink":"https://changakira.github.io/categories/Qt/"},{"name":"mysql","slug":"数据库/mysql","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"},{"name":"用法","slug":"数据库/mysql/用法","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%94%A8%E6%B3%95/"},{"name":"用法","slug":"Qt/用法","permalink":"https://changakira.github.io/categories/Qt/%E7%94%A8%E6%B3%95/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://changakira.github.io/tags/mysql/"},{"name":"Qt","slug":"Qt","permalink":"https://changakira.github.io/tags/Qt/"}]},{"title":"mysql修改密码报错","slug":"mysql-reset-password","date":"2024-05-10T04:32:46.000Z","updated":"2024-08-25T10:23:48.000Z","comments":true,"path":"2024/05/10/mysql-reset-password/","link":"","permalink":"https://changakira.github.io/2024/05/10/mysql-reset-password/","excerpt":"本文讨论两个报错：Operation ALTER USER failed for &#39;root&#39;@&#39;%&#39;与Plugin &#39;mysql_native_password&#39; is not loaded","text":"本文讨论两个报错：Operation ALTER USER failed for &#39;root&#39;@&#39;%&#39;与Plugin &#39;mysql_native_password&#39; is not loaded 报错Operation ALTER USER failed for ‘root‘@’%’安装mysql后，更改初始密码时，按照教程输入ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123&#39;;，报错Operation ALTER USER failed for &#39;root&#39;@&#39;%&#39;。（或者输入ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123&#39;;，报错Operation ALTER USER failed for &#39;root&#39;@&#39;localhost&#39;） 解决：在已登录mysql后输入 use mysql select user,host from user; 如上图，显示user中root的host为localhost，则应输入ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123&#39;; 反之，若显示user中root的host为%，则应输入ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123&#39;; 报错Plugin ‘mysql_native_password’ is not loaded上文中的代码已经避开了接下来讨论的这一个ERROR。实际上，在网上教程中，我查到的代码是ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123&#39;;，然后遇到报错Plugin &#39;mysql_native_password&#39; is not loaded，如下图所示。 我在网上查到的资料中没有线索。这时，我发现有人提到 MySQL5.8从开始将caching_sha2_password替代mysql_native_password作为默认的身份验证插件 于是我将代码中的mysql_native_password改为caching_sha2_password，即输入： ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH caching_sha2_password BY &#39;123&#39;; 成功。后来我查阅资料，又发现直接省略这部分就行： ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"数据库/mysql","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"},{"name":"遇到问题","slug":"数据库/mysql/遇到问题","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://changakira.github.io/tags/mysql/"}]},{"title":"QT5.7.1与VisualStudio2015","slug":"QT5-7-1与VisualStudio2015","date":"2024-02-08T12:43:17.000Z","updated":"2024-08-25T10:31:20.000Z","comments":true,"path":"2024/02/08/QT5-7-1与VisualStudio2015/","link":"","permalink":"https://changakira.github.io/2024/02/08/QT5-7-1%E4%B8%8EVisualStudio2015/","excerpt":"因为项目的需要，我需要使用Qt5.7.1与VisualStudio2015进行联合开发，由于都是很老的版本了，在配置过程中遇上了数不尽的坑，这些坑还大多是网上很多人有同样问题却未能解决的。在无数次失败后我终于找到了完美的源，在此分享。","text":"因为项目的需要，我需要使用Qt5.7.1与VisualStudio2015进行联合开发，由于都是很老的版本了，在配置过程中遇上了数不尽的坑，这些坑还大多是网上很多人有同样问题却未能解决的。在无数次失败后我终于找到了完美的源，在此分享。 VS2015虽然微软的旧版本VS号称是可以下载得到，但在官网上其实只有企业版和专业版。找很久后终于找到了社区版的下载地址。若使用Qt开发，语言只需要勾选VC++即可。使用该文件可能有部分内容安装不成功，不影响正常使用。注意，VS2015对应的VC++版本应该是14.0。下图是在Qt creator中应该自动检测到的。 Qt5.7.1.0该版本的Qt在官网上也是十分难找。我一度以为该版本已经不受支持而从官网撤下去了，在网上下载的其它包却不能完美运行，后来终于找到了：https://download.qt.io/new_archive&#x2F;qt&#x2F;5.7&#x2F;5.7.1&#x2F; 我们应该选择这一项。注意“2015”，“msvc”和“_64”(如果你是64位系统)。 Windows 调试工具如果Qt缺失debuggers，则需要下载此项。 Windows 调试工具官网介绍 省流：安装 Windows SDK，然后在功能列表中只选择“ Windows 调试工具”。 安装Qt在VS中的插件从清华源安装版本2.4.3（后续版本有bug）：https://mirrors.tuna.tsinghua.edu.cn/qt/archive/vsaddin/2.4.3/，选择2015版本，下载后双击打开。如果VS已经打开则安装完成后需要重启VS。 然后在VS扩展中禁用其自动更新。 点击Qt VS Toos，点击Qt Options，添加您的Qt安装路径。 （添加至bin的上一级目录，如下图）。 这样就全部弄好啦！","categories":[{"name":"存档点","slug":"存档点","permalink":"https://changakira.github.io/categories/%E5%AD%98%E6%A1%A3%E7%82%B9/"},{"name":"VS2015&QT5.7.1","slug":"存档点/VS2015-QT5-7-1","permalink":"https://changakira.github.io/categories/%E5%AD%98%E6%A1%A3%E7%82%B9/VS2015-QT5-7-1/"}],"tags":[{"name":"VS","slug":"VS","permalink":"https://changakira.github.io/tags/VS/"},{"name":"Qt5","slug":"Qt5","permalink":"https://changakira.github.io/tags/Qt5/"},{"name":"存档","slug":"存档","permalink":"https://changakira.github.io/tags/%E5%AD%98%E6%A1%A3/"}]},{"title":"win11家庭版启用Hyper-V并搭载win10家庭版系统","slug":"Hyper-V","date":"2024-02-08T09:32:11.000Z","updated":"2024-08-25T10:24:20.000Z","comments":true,"path":"2024/02/08/Hyper-V/","link":"","permalink":"https://changakira.github.io/2024/02/08/Hyper-V/","excerpt":"Hyper-V是win8及以上内置的虚拟机平台。本文以win11（家庭版）物理机上启用Hyper-V并搭载win10（家庭版）系统为例，其它情况可酌情参考。","text":"Hyper-V是win8及以上内置的虚拟机平台。本文以win11（家庭版）物理机上启用Hyper-V并搭载win10（家庭版）系统为例，其它情况可酌情参考。 确认您的系统版本。必须为64位机，且支持CPU虚拟化。 注意Hyper-V与VirthalBox不兼容。 注意官方不建议在家庭版开启Hyper-V功能，原文为： 关于 “启用 Hyper-V 虚拟机” 的问题， 十分抱歉，Hyper-V 功能仅适用于 Windows 10 企业版、专业版与教育版，暂不支持 Windows 10 家庭版。 如果您希望使用 Hyper-V 相关功能的话，建议您改为使用 Windows 10 专业版系统。 注意：请勿尝试在 Windows 10 家庭版上安装 Hyper-V 角色，避免设备出现意料之外的故障。 我已知存在的问题有不能完全关闭，但似乎也已经找到了解决办法。（我没有尝试奥）（我用着到目前为止还没出什么幺蛾子） 如果你仍然决定在家庭版中使用就看下去吧！ 开启CPU虚拟化首先打开任务管理器（您可以右键开始菜单找到它），点击性能-CPU，在右下角查看是否已开启CPU虚拟化。若为是，跳至下一章节。 若为否，则需要先开启CPU虚拟化（VT）功能。各品牌电脑操作不同，可以参考雷电模拟器提供的详细操作：https://help.ldmnq.com/docs/jg8S1J或https://zhuanlan.zhihu.com/p/115103952。雷电模拟器是我曾使用的一款安卓模拟器，它基于VirthalBox，与Hyper-V不兼容，因为它开启VT的教程比较详细所以放上来。 启用Hyper-V功能Windows专业版、企业版与教育版Hyper-V在Windows专业版、企业版与教育版中已内置，只需打开即可。进入控制面板-程序&#x2F;卸载程序-启用或关闭Windows功能，找到Hyper-V，勾选复选框，点击确定，点击重新启动即可。 Windows家庭版新建一个文本文档，输入以下： pushd &quot;%~dp0&quot; dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum &gt;hv.txt for /f %%i in (&#39;findstr /i . hv.txt 2^&gt;nul&#39;) do dism /online /norestart /add-package:&quot;%SystemRoot%\\servicing\\Packages\\%%i&quot; del hv.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALL pause 修改后缀名为.bat，以管理员身份运行并等待（等待时间比较长，终端窗口的输出看起来是重复的，实际上是正确的，耐心等待运行结束），根据提示输入y并回车使设备重启。 使用首先我们需要一个系统映像文件，我选择win10的ISO文件。我是从MSDN - I tell you 下载的。本站完全免费，支持BT下载。 Windows版本中，business_editions 版本包含：Education(教育版); Enterprise (企业版); Professional(专业版)；consumer_editions 版本包含：Home(家庭版); Education(教育版) ; Professional(专业版)；LTSC是Windows企业版的特殊版本，更加专注于操作系统的长期稳定运行和兼容性。 因为我想搭载家庭版，选择consumer_editions。 打开HYyper-V管理器，选择新建-虚拟机。 在第二页中，可以给虚拟机起个名字并选择一个地方安装。根据自己使用电脑的经验推断至少需要多少空间。 第三页中选择代数。win7选择第一代，高版本Windows需要选择第二代。 第四页分配动态内存。默认的4G也可以，设一个更大的数也可以。因为在微软介绍中，win10的硬件条件为4G以上，所以最好不要往低调。 配置网络需选择Default Switch。 选择创建虚拟硬盘。 这会在你物理机的磁盘中创建一个虚拟硬盘来存储虚拟机的信息。 最后的安装选项，选择“从可启动的映像文件安装操作系统”，并选择我们刚才下载的ISO文件。 点击完成。 双击我们刚刚新建的虚拟机，点击启动，然后不停按任意键，进入Windows安装界面。根据自己的喜好安装，等待结束即可。（选择我没有激活序列码） 激活与分辨率调整这时我们的虚拟机是很小的一个屏幕。我们直接在虚拟机设置中调整分辨率即可，不用看网上其他的复杂操作。 在这里放一个我用着好用的win10激活工具：https://www.xitongtiandi.net/wenzhang/win10/44982.html。包很小，本地下载即可。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://changakira.github.io/categories/Windows/"},{"name":"Windows技巧","slug":"Windows/Windows技巧","permalink":"https://changakira.github.io/categories/Windows/Windows%E6%8A%80%E5%B7%A7/"},{"name":"Hyper-V","slug":"Windows/Windows技巧/Hyper-V","permalink":"https://changakira.github.io/categories/Windows/Windows%E6%8A%80%E5%B7%A7/Hyper-V/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://changakira.github.io/tags/Windows/"},{"name":"Hyper-V","slug":"Hyper-V","permalink":"https://changakira.github.io/tags/Hyper-V/"}]},{"title":"B站图床","slug":"bili图床","date":"2024-02-07T13:43:12.000Z","updated":"2024-08-25T10:28:00.000Z","comments":true,"path":"2024/02/07/bili图床/","link":"","permalink":"https://changakira.github.io/2024/02/07/bili%E5%9B%BE%E5%BA%8A/","excerpt":"好！本站现在起改用B站图床啦！以后的图片肯定能加载好！以下是使用中遇到的问题与解决方法。","text":"好！本站现在起改用B站图床啦！以后的图片肯定能加载好！以下是使用中遇到的问题与解决方法。 有关介绍这里使用的图床为执笔看墨花开大佬开发的插件。图床本身是很容易使用的，这里记录一下在hexo上使用时需要用到“注入器”的问题。 大佬的首篇有关博客记录的是Ta在开发chrome插件时遇到的问题与项目地址，大佬后续又开发了edge插件。 因为我主要使用的是edge浏览器，因此可以直接给出edge插件的下载地址，而chrome插件下载需要您自己查找。 使用hexo时存在的问题上传图片之后就可以获得链接或代码。但是由于B站开启了防盗链，利用HTTP的Referer属性做判断。如果Referer是其白名单之外的网站，就会返回403。我们需要在html的&lt;head&gt;标签中设置如下标志，使资源引用不会携带referrer。&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt; 如果自己就是使用html语法写网站的，该问题就此结束。而在hexo中，我们写博客时只使用markdown语法写正文部分，其它部分是由hexo生成的。 解决这里需要使用到注入器。官方介绍点这里。 在博客的根目录下创建 scripts 文件夹，然后在里面任意命名创建一个 js 文件。在里面编写即可。 在这个具体的问题中，我们需要写上：hexo.extend.injector.register(&#39;head_end&#39;, &#39;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;&#39;,&#39;default&#39;) 第一个参数head_end表示在html的&lt;head&gt;标签后注入。第二个参数是我们需要注入的内容,第三个参数default默认全部页面注入。注意都是字符串形式。 这样，我们就可以顺利地使用该图床了。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/categories/Hexo/"},{"name":"用法，注入器","slug":"Hexo/用法，注入器","permalink":"https://changakira.github.io/categories/Hexo/%E7%94%A8%E6%B3%95%EF%BC%8C%E6%B3%A8%E5%85%A5%E5%99%A8/"},{"name":"优化","slug":"Hexo/优化","permalink":"https://changakira.github.io/categories/Hexo/%E4%BC%98%E5%8C%96/"},{"name":"速度优化","slug":"Hexo/优化/速度优化","permalink":"https://changakira.github.io/categories/Hexo/%E4%BC%98%E5%8C%96/%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/tags/Hexo/"}]},{"title":"在此系统上禁止运行脚本或未对文件数字签名而不能运行脚本","slug":"在此系统上禁止运行脚本？","date":"2024-02-07T12:51:14.000Z","updated":"2024-08-25T10:24:26.000Z","comments":true,"path":"2024/02/07/在此系统上禁止运行脚本？/","link":"","permalink":"https://changakira.github.io/2024/02/07/%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%EF%BC%9F/","excerpt":"使用终端时遇到问题“在此系统上禁止运行脚本或未对文件数字签名而不能运行脚本”。","text":"使用终端时遇到问题“在此系统上禁止运行脚本或未对文件数字签名而不能运行脚本”。 问题详述书接上回，长时间未使用过hexo，且曾对电脑安装内容进行过数次大幅改动，在检查hexo是否完整时发生如图所示在此系统上禁止运行脚本错误。 问题分析既然给出了参阅网址，那我们就去看一看。网址写的还是很详尽的。 如上图。我们尝试获取有效的执行策略，返回为“Restricted”，意为“阻止运行所有脚本文件”。但我们获取影响当前会话的所有执行策略时，返回均为“Undefined”，意为“当前范围内没有设置执行策略”。 这看起来不对，因为这样的话我们获取当前 PowerShell 会话的有效执行策略（在这个具体问题中，即UserPolicy）时返回的也应该是“Undefined”。 对于这个问题参阅网址上也已经写明：如果所有范围内的执行策略均为 Undefined，则对于 Windows 客户端，有效执行策略为 Restricted；对于 Windows Server，有效执行策略为 RemoteSigned。我的环境显然属于前者。 问题解决根据参阅网址的提示，我输入了更改执行策略的命令： Set-ExecutionPolicy -ExecutionPolicy AllSigned 之后重新输入我原来需要的命令hexo -v，此时的报错提示发生了变化：未对文件数字签名而不能运行脚本。这是由于AllSigned策略只允许运行带有数字签名的脚本。 虽然不知道为什么我的hexo脚本没有数字签名，但我相信它是清白的（这一点很重要！）。于是我将策略改为了Bypass： Set-ExecutionPolicy -ExecutionPolicy Bypass 问题解决：","categories":[{"name":"Windows","slug":"Windows","permalink":"https://changakira.github.io/categories/Windows/"},{"name":"遇到问题","slug":"Windows/遇到问题","permalink":"https://changakira.github.io/categories/Windows/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"},{"name":"terminal","slug":"Windows/遇到问题/terminal","permalink":"https://changakira.github.io/categories/Windows/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/terminal/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://changakira.github.io/tags/Windows/"},{"name":"terminal","slug":"terminal","permalink":"https://changakira.github.io/tags/terminal/"}]},{"title":"孩子们，我回来啦！龙年大吉！","slug":"我回来啦","date":"2024-02-07T12:16:30.000Z","updated":"2024-08-25T10:22:26.000Z","comments":true,"path":"2024/02/07/我回来啦/","link":"","permalink":"https://changakira.github.io/2024/02/07/%E6%88%91%E5%9B%9E%E6%9D%A5%E5%95%A6/","excerpt":"哎哟终于连上了！这个这个hexo就是这样有点难连，在学校里想写博客时，一写！一上传！死活上传不上来。放寒假回家啦，试试，果然还是在家里用的顺利。","text":"哎哟终于连上了！这个这个hexo就是这样有点难连，在学校里想写博客时，一写！一上传！死活上传不上来。放寒假回家啦，试试，果然还是在家里用的顺利。 过去的一年也是充当废物的一年。有时间稍微整理一下自己都做了什么事情吧。 过去写的内容也会稍有整理！过去一年里有过重装系统，有过换用系统，来来去去的，有些操作、学习断断续续的，现在竟然回想不起来一点，尽量写一点吧。 写博客真的是一件很累的事情，有时候心血来潮还要面对连接不上的问题。我也想过要不要转战知乎、csdn或者博客园，但思来想去，还是觉得自己的这一片小天地最适合自己。 在学校多次连接无果后，已经有相当长的时间没有打开过自己的博客页面了。而因为校内的学习和项目，磁盘空间日益捉急，很多内容卸了下下了卸，崩溃至极，已决定下学期就购置硬盘。兜兜转转，node.js和git在此情形下也没有幸免。而当我刚刚要重启博客计划时，嘿！您猜怎么着？ 我发现node.js没有也可以正常部署博客！只要还保有node和npm即可。我还意外遇到了一桩怪事，下一篇单独拿出来讲。 这一篇就先这样吧！回看一年前自己的博客，未免有些幼稚，我将重新整理整理自己的措辞。 另：默元祝各位龙年快乐！","categories":[{"name":"庆典","slug":"庆典","permalink":"https://changakira.github.io/categories/%E5%BA%86%E5%85%B8/"},{"name":"杂谈","slug":"杂谈","permalink":"https://changakira.github.io/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"庆典","slug":"庆典","permalink":"https://changakira.github.io/tags/%E5%BA%86%E5%85%B8/"},{"name":"杂谈","slug":"杂谈","permalink":"https://changakira.github.io/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"Begin  Hexo博客指南","slug":"BeginYourCreattiveMindFromHere","date":"2023-07-23T03:26:57.000Z","updated":"2024-08-25T10:24:10.000Z","comments":true,"path":"2023/07/23/BeginYourCreattiveMindFromHere/","link":"","permalink":"https://changakira.github.io/2023/07/23/BeginYourCreattiveMindFromHere/","excerpt":"","text":"你好呀！这里是默元。我将为您介绍如何使用Hexo和Github来方便快捷地搭建自己的博客页面。真的非常抱歉！我使用的图床在国内环境下访问速度极慢，可能您自己探索配好以后回到网站才发现我有放详细的过程图！ Hexo简要介绍（以及杂谈）Hexo是一个快速、简洁且高效的静态博客框架，搭配Github可以让您快速完成自己的静态博客搭建，十分简明友好。Hexo提供极丰富的主题风格与功能模块，对于新手来说也能快速拥有很好的效果。 Hexo使用的是Markdown语法。你可以在这里学习Markdown语法。 Hexo使用的是Markdown语法，但使用HTML来书写你的博客也是可以的。虽然这样会复杂一些……我也只是顺口一提。如果想学习HTML，我个人推荐w3school。 让我们开始吧！以下我所说的全部内容，你也可以在Hexo官方文档中找到。 一、前置准备为了使用Hexo，你需要下载Node.JS和git。 Node.js官网十分简洁明了：左为“推荐给大多数用户的版本”，也就是通俗意义上的“稳定版”，右为最新版。选择哪个无所谓。你可以更改安装目录，接下来一直点击next即可。 将光标置于开始菜单徽标上，右键选择终端。 第一次选择终端（管理员）时可能报错找不到程序，先以普通权限打开终端即可自动解决。输入node -v、npm -v来查看版本，若成功显示则安装完成。 注：npm是Node的开放式模块登记和管理系统，是Node.js包的标准发布平台，用于Node.js包的发布、传播、依赖控制，npm在安装Node.js时会连带被安装。如果你仔细查看安装步骤过程的英文，应该对其有所印象。 npm全局下载的东西默认存在C盘，如果你对此不满意，可以进行如下操作。 使用npm get prefix查看npm全局模块的存放路径；使用npm get cache查看npm缓存默认存放路径。你应该会看到两个C盘路径。在自己安装Node.js的路径中新建node_cache、node_global文件夹（名字不要更改），在node_global文件夹中再新建node_modules文件夹。下图以E盘安装Node.js为例，图一中node_modules文件夹是本来就有的，不要动。在终端执行以下命令来设置全局模块的安装路径到 “node_global” 文件夹，npm config set prefix &quot;刚刚建的node_global文件夹地址&quot;在终端执行以下命令来设置缓存到 “node_cache” 文件夹npm config set cache &quot;刚刚建的node_cache文件夹地址&quot;Tips:不会写文件夹地址的同学，可以在文件资源管理器中打开那个文件夹，然后单击上方路径，CTRL+C复制即可。 由于 node 全局模块大多数都是可以通过命令行访问的，还要把[node_global]的路径加入到系统变量中，方便直接使用命令行运行. 现在大家基本都用win10及更高系统，最简单的打开环境变量的方法是在搜索中直接搜索“环境”或“高级”，点击对应选项，点击“环境变量”。 可以看到环境变量分为用户变量和系统变量。用户变量只针对当前电脑登录的用户有效，而系统变量对所有使用这台电脑的用户有效。更多区别可以点我了解双击系统变量（下边那堆）中的PATH，对最下面空白的一个格子双击（或点击新建），写入刚刚创建的node_global文件夹对应路径。然后点击确定。 最后对刚刚新建的三个文件夹进行如下操作：右键-属性-安全-编辑-勾选完全控制。这样才能确保使用npm时有权限写入文件夹。 接下来我们安装Git吧！ Git安装会自动添加到环境变量，因此省心不少，唯独安装过程中大量的选择和英文比较麻烦。这位作者的翻译非常好，大家可以看看。如果不关心安装过程中的具体内容，也可以（除更换安装路径外）全部选择默认（下一步）。 我们还需要一个强大的文件编辑软件。很多文件，我们虽然可以用记事本(Notepad)打开，却无法编辑。我使用Notepad–打开并编辑。 找到下载界面，选择Notepad–v2.6.0-win10-single-portable.zip下载。解压缩至合适位置。 安装Hexo使用 npm 安装 Hexo。在终端输入npm install -g hexo-cli，回车并稍后。依旧用hexo -v查看一下版本确认安装成功。新建一个文件夹，任意名字都行，它将会是你博客所有内容存储的地方，比如我在D盘新建一个文件夹blog_byHexo。然后右键-更多，选择Git bash here。 在Git bash中，不可以使用CTRL+C&#x2F;V来复制粘贴。你可以右键选择copy和paste。 输入hexo init，回车。结束后你将发现文件夹中多了许多东西，这就是初始化的内容。输入hexo g,回车稍候，生成静态文件。输入hexo s，回车稍候，开启本地预览服务。这时，在浏览器访问http://localhost:4000/就可以查看你的初始博客页面了。博客页面的美化与各种功能模块的添加可以自行探索。 此时我们的博客页面只能在本地访问，接下来我们将通过Github将其部署至互联网上。 Github上要做的事情确保你有一个Github账号。注册时如果一个邮箱注册不上，换一个邮箱。我当时QQ邮箱无法注册，使用学校邮箱注册的，但是有人QQ邮箱就能注册上。 顺便介绍一下这个地方：点击右上角自己的头像，选择Your profile，下面这些格子，每个格子代表一天，颜色越绿，表示你在这一天向Github上传的代码数量越多（GitHub是世界上最大的代码托管平台）。如果你的大学生涯中这些格子全是绿的，面试时给考官一看，相信考官一定会对你惊为天人，青睐有加。 说回正题，在自己的个人主页，新建一个仓库。注意记住仓库这个词。Repository name一定要填写[自己的github账户名].github.io（没有中括号）。剩下的可以不动。确保一定是public！ 对博客文件夹右键-Git bash here（翻译：在此文件夹路径中打开git bash），输入git config --global user.name &quot;你的github用户名&quot;,git config --global user.email &quot;你的github注册邮箱&quot;。接下来ssh-keygen -t rsa -C &quot;你的github注册邮箱&quot;，生成ssh密钥文件。有提示按提示输入yes，无提示按回车。 这样会生成id_rsa和id_rsa.pub两个文件（在C:\\Users\\你的电脑用户名.ssh）。接着用记事本或Notepad–打开id_rsa.pub 密钥，将全部内容复制（CTRL+A，CTRL+C）。注：使用Notepad–打开的方式：1.右键-打开方式-选择其他应用-在电脑上选择应用-找到你安装Notepad–的位置，点击Notepad–。 2.或者先打开Notepad–，再将文件拖入Notepad–窗口中。 接下来回到Github，点击右上角头像，选择settings，选择SSH and GPG keys那一项，点击new SSH Key.title为你key的名称，任意填写。将刚刚复制的内容全部粘贴在下方Key输入框中。 开始部署在你的博客文件夹中找到站点配置文件_config.yml,将最后一段更改为 deploy: type: git repo: https://github.com/ChangAkira/ChangAkira.github.io.git(你Github上建好的的仓库地址) branch: master 到这里就全部结束啦！git bash中，依次执行hexo clean,hexo g,hexo d。等待一会儿（延迟）后，你就可以在”Github用户名.github.io”网站看到自己的博客了。 后记终于将建站步骤大致梳理清晰了。 本文难免有各种疏漏之处，建站也经常会遇到各种诡异的现象，还请大家多多包含。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/categories/Hexo/"},{"name":"建站","slug":"Hexo/建站","permalink":"https://changakira.github.io/categories/Hexo/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/tags/Hexo/"}]},{"title":"easyx分享会代码","slug":"easyx","date":"2023-07-23T03:26:57.000Z","updated":"2024-08-25T10:24:24.000Z","comments":true,"path":"2023/07/23/easyx/","link":"","permalink":"https://changakira.github.io/2023/07/23/easyx/","excerpt":"","text":"跟随鼠标壁纸（需要自行引入资源图片）：#define _CRT_SECURE_NO_WARNINGS #include&lt;stdio.h&gt; #include&lt;graphics.h&gt; #include&quot;resource.h&quot; #include&lt;conio.h&gt; int main() &#123; ExMessage message; IMAGE bg; int cx = GetSystemMetrics(SM_CXSCREEN); int cy = GetSystemMetrics(SM_CYSCREEN); initgraph(cx, cy, EX_NOCLOSE | EX_NOMINIMIZE); HWND hwnd = GetForegroundWindow(); SetWindowLong(hwnd, GWL_STYLE, GetWindowLong(hwnd, GWL_STYLE) &amp; ~WS_CAPTION &amp; ~WS_THICKFRAME &amp; ~WS_BORDER); SetWindowPos(hwnd, HWND_TOP, 0, 0, cx, cy, SWP_SHOWWINDOW); loadimage(&amp;bg, _T(&quot;JPG&quot;), MAKEINTRESOURCE(IDR_JPG1), cx * 1.2, cy * 1.2, 0 ); putimage(-0.1 * cx, -0.1 * cy, &amp;bg); BeginBatchDraw(); while(!_kbhit()) &#123; peekmessage(&amp;message, EX_MOUSE, TRUE); putimage(0.2 * (message.x - cx), 0.2 * (message.y - cy),&amp;bg); FlushBatchDraw(); cleardevice(); &#125; EndBatchDraw(); closegraph(); return 0; &#125; 立方体开始动画#include &lt;graphics.h&gt; #include &lt;math.h&gt; #include&lt;conio.h&gt; #define square_root_two 1.4142135623731 #define square_root_three 1.7320508075689 #define square_root_six 2.4494897427832 #define PI 3.1415926535898 #define cubenum 5 // 正方体数量 #define LineCOLOR BLACK #define bkCOLOR WHITE #define turnrate 3 // 正方体之间旋转等待 #define Stardelay 800 #define Enddelay 750 #define FPS 50 // 帧数 int cx = GetSystemMetrics(SM_CXSCREEN); int cy = GetSystemMetrics(SM_CYSCREEN); int center_x = cx / 2; int center_y = cy / 2; int sidegap = 35; /////////////////////// // 结构定义 // 定义三维点 class POINT3D &#123; public: double x, y, z; POINT3D() &#123;&#125; POINT3D(double x, double y, double z) &#123; this-&gt;x = x; this-&gt;y = y; this-&gt;z = z; &#125; POINT3D(POINT3D&amp; P) &#123; x = P.x; y = P.y; z = P.z; &#125; private: &#125;; // 定义正方体 struct Cube &#123; double side_length; // 边长 POINT3D P[8]; // 当前坐标 POINT3D tP[8]; // 初始坐标 POINT p[8]; // 投影坐标 int taking; // 是否在可以运动 0否1是 初始为1 运动结束为0 int shoptime; // 暂停时间 int haddone; // 已完成帧数，到 FPS值 停止 taking变为0 &#125;cube[cubenum]; // cubenum个 边长低为10 公差10 int end; // 0为初始值，所有正方体停止后end变为1 int temp; // 临时变量，可以随便用 /////////////////////// // 函数声明 // 功能函数 POINT projection(POINT3D&amp; P3); // 降维投影得到起始二维坐标 // 过程函数 void Initcube(); // 初始化所有正方体信息 void rotation(); // 旋转 void Drawcube(); // 描点连线 void changing(); // 计算二维点 void ifend(); // 判断是否结束 /////////////////////// // 函数定义 int main() &#123; // 设置画布相关信息 initgraph(cx, cy, EX_NOCLOSE | EX_NOMINIMIZE); HWND hwnd = GetForegroundWindow(); SetWindowLong(hwnd, GWL_STYLE, GetWindowLong(hwnd, GWL_STYLE) &amp; ~WS_CAPTION &amp; ~WS_THICKFRAME &amp; ~WS_BORDER); SetWindowPos(hwnd, HWND_TOP, 0, 0, cx, cy, SWP_SHOWWINDOW); setbkcolor(bkCOLOR); setbkmode(TRANSPARENT); setlinecolor(LineCOLOR); setlinestyle(PS_SOLID, 2); BeginBatchDraw(); cleardevice(); Initcube(); // 静态输出 Drawcube(); FlushBatchDraw(); Sleep(Stardelay); // 开始动画 while (end == 0) &#123; cleardevice(); rotation(); changing(); Drawcube(); FlushBatchDraw(); ifend(); Sleep(1000 / FPS); // 1000/帧数 = 延迟时间 &#125; Sleep(Enddelay); for (int i = 1; i &lt;= 255; i+=(i/51+1)) &#123; cleardevice(); sidegap = sidegap + i; Initcube(); // 静态输出 setbkcolor(RGB(255-i, 255-i, 255-i)); setlinecolor(RGB(i, i, i)); //setlinecolor(RGB(255 - i, 255 - i, 255 - i)); //setbkcolor(RGB(i, i, i)); Drawcube(); FlushBatchDraw(); cleardevice(); Sleep(5); &#125; system(&quot;pause&quot;); EndBatchDraw(); closegraph(); return 0; &#125; // 初始化所有正方体信息 void Initcube() &#123; end = 0; for (int num = 0; num &lt; cubenum; num++) &#123; // 设置边长 cube[num].side_length = square_root_two * (num + 1) * sidegap; // 设置三维点 cube[num].tP[0] = &#123; 0,0,0 &#125;; cube[num].tP[1] = &#123; cube[num].side_length / square_root_two , cube[num].side_length / square_root_two , 0 &#125;; cube[num].tP[2] = &#123; 0, cube[num].side_length * square_root_two , 0 &#125;; cube[num].tP[3] = &#123; cube[num].side_length / square_root_two * (-1) , cube[num].side_length / square_root_two , 0 &#125;; for (int num1 = 4; num1 &lt; 9; num1++) &#123; cube[num].P[(num1 - 4)] = cube[num].tP[(num1 - 4)]; cube[num].tP[num1] = &#123; cube[num].P[(num1 - 4)].x ,cube[num].P[(num1 - 4)].y , cube[num].P[(num1 - 4)].z + cube[num].side_length &#125;; cube[num].P[num1] = cube[num].tP[num1]; &#125; cube[num].taking = 1; cube[num].shoptime = (int)(num * turnrate); cube[num].haddone = 0; &#125; // 转换得到投影点 changing(); &#125; // 旋转 void rotation() &#123; // 旋转轴点为（0，cube[num].side_length / square_root_two，z) for (int num = 0; num &lt; cubenum; num++) &#123; if (cube[num].taking == 1) &#123; if (cube[num].shoptime == 0) &#123; // 底面做旋转操作 for (int num1 = 0; num1 &lt; 4; num1++) &#123; cube[num].P[num1].x = (cube[num].tP[num1].x - 0) * cos(-cube[num].haddone * PI / FPS) - (cube[num].tP[num1].y - cube[num].side_length / square_root_two) * sin(-cube[num].haddone * PI / FPS) + 0; cube[num].P[num1].y = (cube[num].tP[num1].x - 0) * sin(-cube[num].haddone * PI / FPS) + (cube[num].tP[num1].y - cube[num].side_length / square_root_two) * cos(-cube[num].haddone * PI / FPS) + cube[num].side_length / square_root_two; &#125; // 顶面 for (int num2 = 4; num2 &lt; 8; num2++) &#123; cube[num].P[num2].x = cube[num].P[(num2 - 4)].x; cube[num].P[num2].y = cube[num].P[(num2 - 4)].y; cube[num].P[num2].z = cube[num].P[(num2 - 4)].z + cube[num].side_length; &#125; cube[num].haddone++; if (cube[num].haddone == (FPS + 1)) cube[num].taking = 0; &#125; else cube[num].shoptime--; &#125; &#125; &#125; // 计算二维点 void changing() &#123; for (int num = 0; num &lt; cubenum; num++) for (int num1 = 0; num1 &lt; 8; num1++) cube[num].p[num1] = projection(cube[num].P[num1]); &#125; // 描点连线 void Drawcube() &#123; for (int num = 0; num &lt; cubenum; num++) &#123; for (int num1 = 0; num1 &lt; 4; num1++) &#123; // 底层 temp = ((num1 + 1) == 4) ? 0 : (num1 + 1); line(cube[num].p[num1].x, cube[num].p[num1].y, cube[num].p[temp].x, cube[num].p[temp].y); // 侧楞 temp = num1 + 4; line(cube[num].p[num1].x, cube[num].p[num1].y, cube[num].p[temp].x, cube[num].p[temp].y); // 顶层 temp = ((num1 + 5) == 8) ? 4 : (num1 + 5); line(cube[num].p[(num1 + 4)].x, cube[num].p[(num1 + 4)].y, cube[num].p[temp].x, cube[num].p[temp].y); &#125; &#125; &#125; // 判断是否结束 void ifend() &#123; if (cube[(cubenum - 1)].taking == 0) end = 1; &#125; // 投影得到起始二维坐标 POINT projection(POINT3D&amp; p3) &#123; POINT p2; // x直接取值 p2.x = (long)p3.x + center_x; // y用点到直线公式 p2.y = (long)((p3.y * square_root_two - p3.z * 2) / square_root_six + center_y); return p2; &#125; 立方体开始动画作品由星羽1704（email &#x31;&#x34;&#55;&#x39;&#50;&#x34;&#x35;&#48;&#53;&#48;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#109; 联系方式 qq 1479245050 ）在easyx例程文档中给出。本文将其做少量的修改，得到另外的效果。","categories":[{"name":"C/C++","slug":"C-C","permalink":"https://changakira.github.io/categories/C-C/"},{"name":"EasyX","slug":"C-C/EasyX","permalink":"https://changakira.github.io/categories/C-C/EasyX/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"https://changakira.github.io/tags/C-C/"}]}],"categories":[{"name":"庆典","slug":"庆典","permalink":"https://changakira.github.io/categories/%E5%BA%86%E5%85%B8/"},{"name":"hexo","slug":"hexo","permalink":"https://changakira.github.io/categories/hexo/"},{"name":"插件","slug":"hexo/插件","permalink":"https://changakira.github.io/categories/hexo/%E6%8F%92%E4%BB%B6/"},{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://changakira.github.io/categories/Volantis%E4%B8%BB%E9%A2%98/"},{"name":"用法","slug":"Volantis主题/用法","permalink":"https://changakira.github.io/categories/Volantis%E4%B8%BB%E9%A2%98/%E7%94%A8%E6%B3%95/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"AI","slug":"笔记/AI","permalink":"https://changakira.github.io/categories/%E7%AC%94%E8%AE%B0/AI/"},{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/categories/Hexo/"},{"name":"优化","slug":"Hexo/优化","permalink":"https://changakira.github.io/categories/Hexo/%E4%BC%98%E5%8C%96/"},{"name":"速度优化","slug":"Hexo/优化/速度优化","permalink":"https://changakira.github.io/categories/Hexo/%E4%BC%98%E5%8C%96/%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"},{"name":"volantis主题","slug":"volantis主题","permalink":"https://changakira.github.io/categories/volantis%E4%B8%BB%E9%A2%98/"},{"name":"技巧","slug":"volantis主题/技巧","permalink":"https://changakira.github.io/categories/volantis%E4%B8%BB%E9%A2%98/%E6%8A%80%E5%B7%A7/"},{"name":"小玩意儿","slug":"小玩意儿","permalink":"https://changakira.github.io/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/"},{"name":"Qt5.7.1","slug":"小玩意儿/Qt5-7-1","permalink":"https://changakira.github.io/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/Qt5-7-1/"},{"name":"volantis_assistant","slug":"小玩意儿/Qt5-7-1/volantis-assistant","permalink":"https://changakira.github.io/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/Qt5-7-1/volantis-assistant/"},{"name":"杂谈","slug":"杂谈","permalink":"https://changakira.github.io/categories/%E6%9D%82%E8%B0%88/"},{"name":"用法","slug":"Hexo/用法","permalink":"https://changakira.github.io/categories/Hexo/%E7%94%A8%E6%B3%95/"},{"name":"自定义html","slug":"Hexo/用法/自定义html","permalink":"https://changakira.github.io/categories/Hexo/%E7%94%A8%E6%B3%95/%E8%87%AA%E5%AE%9A%E4%B9%89html/"},{"name":"杂项","slug":"杂项","permalink":"https://changakira.github.io/categories/%E6%9D%82%E9%A1%B9/"},{"name":"Qt","slug":"Qt","permalink":"https://changakira.github.io/categories/Qt/"},{"name":"技巧","slug":"Qt/技巧","permalink":"https://changakira.github.io/categories/Qt/%E6%8A%80%E5%B7%A7/"},{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/categories/WSL2/"},{"name":"用法","slug":"WSL2/用法","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/"},{"name":"xfce4","slug":"WSL2/用法/xfce4","permalink":"https://changakira.github.io/categories/WSL2/%E7%94%A8%E6%B3%95/xfce4/"},{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/categories/hackRF/"},{"name":"用法","slug":"hackRF/用法","permalink":"https://changakira.github.io/categories/hackRF/%E7%94%A8%E6%B3%95/"},{"name":"遇到问题","slug":"WSL2/遇到问题","permalink":"https://changakira.github.io/categories/WSL2/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"},{"name":"数据库","slug":"数据库","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"数据库/mysql","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"},{"name":"用法","slug":"数据库/mysql/用法","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%94%A8%E6%B3%95/"},{"name":"用法","slug":"Qt/用法","permalink":"https://changakira.github.io/categories/Qt/%E7%94%A8%E6%B3%95/"},{"name":"遇到问题","slug":"数据库/mysql/遇到问题","permalink":"https://changakira.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"},{"name":"存档点","slug":"存档点","permalink":"https://changakira.github.io/categories/%E5%AD%98%E6%A1%A3%E7%82%B9/"},{"name":"VS2015&QT5.7.1","slug":"存档点/VS2015-QT5-7-1","permalink":"https://changakira.github.io/categories/%E5%AD%98%E6%A1%A3%E7%82%B9/VS2015-QT5-7-1/"},{"name":"Windows","slug":"Windows","permalink":"https://changakira.github.io/categories/Windows/"},{"name":"Windows技巧","slug":"Windows/Windows技巧","permalink":"https://changakira.github.io/categories/Windows/Windows%E6%8A%80%E5%B7%A7/"},{"name":"Hyper-V","slug":"Windows/Windows技巧/Hyper-V","permalink":"https://changakira.github.io/categories/Windows/Windows%E6%8A%80%E5%B7%A7/Hyper-V/"},{"name":"用法，注入器","slug":"Hexo/用法，注入器","permalink":"https://changakira.github.io/categories/Hexo/%E7%94%A8%E6%B3%95%EF%BC%8C%E6%B3%A8%E5%85%A5%E5%99%A8/"},{"name":"遇到问题","slug":"Windows/遇到问题","permalink":"https://changakira.github.io/categories/Windows/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"},{"name":"terminal","slug":"Windows/遇到问题/terminal","permalink":"https://changakira.github.io/categories/Windows/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/terminal/"},{"name":"建站","slug":"Hexo/建站","permalink":"https://changakira.github.io/categories/Hexo/%E5%BB%BA%E7%AB%99/"},{"name":"C/C++","slug":"C-C","permalink":"https://changakira.github.io/categories/C-C/"},{"name":"EasyX","slug":"C-C/EasyX","permalink":"https://changakira.github.io/categories/C-C/EasyX/"}],"tags":[{"name":"庆典","slug":"庆典","permalink":"https://changakira.github.io/tags/%E5%BA%86%E5%85%B8/"},{"name":"Hexo","slug":"Hexo","permalink":"https://changakira.github.io/tags/Hexo/"},{"name":"Volantis主题","slug":"Volantis主题","permalink":"https://changakira.github.io/tags/Volantis%E4%B8%BB%E9%A2%98/"},{"name":"Datawhale_AI夏令营","slug":"Datawhale-AI夏令营","permalink":"https://changakira.github.io/tags/Datawhale-AI%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://changakira.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Hexo插件","slug":"Hexo插件","permalink":"https://changakira.github.io/tags/Hexo%E6%8F%92%E4%BB%B6/"},{"name":"小玩意儿","slug":"小玩意儿","permalink":"https://changakira.github.io/tags/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/"},{"name":"杂谈","slug":"杂谈","permalink":"https://changakira.github.io/tags/%E6%9D%82%E8%B0%88/"},{"name":"hexo","slug":"hexo","permalink":"https://changakira.github.io/tags/hexo/"},{"name":"html","slug":"html","permalink":"https://changakira.github.io/tags/html/"},{"name":"杂项","slug":"杂项","permalink":"https://changakira.github.io/tags/%E6%9D%82%E9%A1%B9/"},{"name":"二进制文件","slug":"二进制文件","permalink":"https://changakira.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/"},{"name":"Qt","slug":"Qt","permalink":"https://changakira.github.io/tags/Qt/"},{"name":"bat文件","slug":"bat文件","permalink":"https://changakira.github.io/tags/bat%E6%96%87%E4%BB%B6/"},{"name":"WSL2","slug":"WSL2","permalink":"https://changakira.github.io/tags/WSL2/"},{"name":"xfce4","slug":"xfce4","permalink":"https://changakira.github.io/tags/xfce4/"},{"name":"hackRF","slug":"hackRF","permalink":"https://changakira.github.io/tags/hackRF/"},{"name":"mysql","slug":"mysql","permalink":"https://changakira.github.io/tags/mysql/"},{"name":"VS","slug":"VS","permalink":"https://changakira.github.io/tags/VS/"},{"name":"Qt5","slug":"Qt5","permalink":"https://changakira.github.io/tags/Qt5/"},{"name":"存档","slug":"存档","permalink":"https://changakira.github.io/tags/%E5%AD%98%E6%A1%A3/"},{"name":"Windows","slug":"Windows","permalink":"https://changakira.github.io/tags/Windows/"},{"name":"Hyper-V","slug":"Hyper-V","permalink":"https://changakira.github.io/tags/Hyper-V/"},{"name":"terminal","slug":"terminal","permalink":"https://changakira.github.io/tags/terminal/"},{"name":"C/C++","slug":"C-C","permalink":"https://changakira.github.io/tags/C-C/"}]}